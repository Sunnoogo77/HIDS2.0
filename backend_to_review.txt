---------- START OF FILE: backend/app/api/engine.py ----------

from fastapi import APIRouter, Depends, HTTPException
from app.core.security import get_current_active_user
from app.db.models import User as ORMUser
from app.services.monitoring_service import (
    get_file_items, update_file_status,
    get_folder_items, update_folder_status,
    get_ip_items, update_ip_status,
)
from app.core.scheduler import add_interval_job, remove_job, FREQ_SECONDS
from app.services.scan_tasks import scan_file, scan_folder, scan_ip
from typing import Dict, Any


# Helper admin:
def require_admin(user: ORMUser = Depends(get_current_active_user)):
    if not getattr(user, "is_admin", False):
        raise HTTPException(status_code=403, detail="Admin privileges required")
    return user


router = APIRouter(
    prefix="/api/engine",
    tags=["engine"],
    dependencies=[Depends(get_current_active_user)],
)


def _get_monitoring_functions(kind: str) -> Dict[str, Any]:
    """Retourne les fonctions et tags pertinents pour un type de surveillance donné."""
    if kind == "file":
        return {"tag": "file", "getter": get_file_items, "updater": update_file_status, "scan_fn": scan_file}
    if kind == "folder":
        return {"tag": "folder", "getter": get_folder_items, "updater": update_folder_status, "scan_fn": scan_folder}
    if kind == "ip":
        return {"tag": "ip", "getter": get_ip_items, "updater": update_ip_status, "scan_fn": scan_ip}
    raise HTTPException(status_code=400, detail="unknown kind")


@router.get("/state")
def engine_state():
    """Retourne un état synthétique du moteur pour le dashboard."""
    kinds = ["file", "folder", "ip"]
    out: Dict[str, Dict[str, int]] = {}
    total_active = 0
    total_stopped = 0

    for kind in kinds:
        fns = _get_monitoring_functions(kind)
        items = fns["getter"](skip=0, limit=10000)
        status_counts = {"active": 0, "stopped": 0}

        for item in items:
            status = getattr(item, "status", "active") or "active"
            if status == "paused":
                status = "stopped"
            if status != "active":
                status = "stopped"
            status_counts[status] += 1

        total = sum(status_counts.values())
        total_active += status_counts["active"]
        total_stopped += status_counts["stopped"]

        mode = "running" if status_counts["active"] > 0 else "stopped"

        out[kind] = {
            "total": total,
            "active": status_counts["active"],
            "paused": 0,
            "stopped": status_counts["stopped"],
            "mode": mode,
        }

    engine_status = "running" if total_active > 0 else "stopped"
    out["engine"] = engine_status
    return out


@router.post("/{kind}/pause-all")
def pause_all(kind: str):
    """Alias de stop_all pour compatibilité."""
    return stop_all(kind)


@router.post("/{kind}/resume-all")
def resume_all(kind: str):
    """Relance tous les éléments d'un type donné."""
    try:
        fns = _get_monitoring_functions(kind)
        tag, getter, updater, scan_fn = fns["tag"], fns["getter"], fns["updater"], fns["scan_fn"]
        items = getter(skip=0, limit=10000)
        resumed_count = 0

        for item in items:
            if getattr(item, "status", "active") != "active":
                updater(item.id, "active")

                interval = FREQ_SECONDS.get(getattr(item, "frequency", "hourly"), 3600)
                if tag == "file":
                    add_interval_job("file", item.id, interval, scan_fn, item_id=item.id, path=item.path)
                elif tag == "folder":
                    add_interval_job("folder", item.id, interval, scan_fn, item_id=item.id, path=item.path)
                else:
                    add_interval_job(
                        "ip",
                        item.id,
                        interval,
                        scan_fn,
                        item_id=item.id,
                        ip=item.ip,
                        hostname=getattr(item, "hostname", None),
                    )
                resumed_count += 1

        return {"ok": True, "resumed": resumed_count}
    except HTTPException as exc:
        raise exc
    except Exception as exc:
        raise HTTPException(status_code=500, detail=f"An unexpected error occurred: {exc}")


@router.post("/{kind}/stop-all")
def stop_all(kind: str):
    """Arrêt fort: retire les jobs et marque les éléments comme stoppés."""
    try:
        fns = _get_monitoring_functions(kind)
        tag, getter, updater = fns["tag"], fns["getter"], fns["updater"]
        items = getter(skip=0, limit=10000)
        stopped_count = 0

        for item in items:
            remove_job(tag, item.id)
            updater(item.id, "stopped")
            stopped_count += 1

        return {"ok": True, "stopped": stopped_count}
    except HTTPException as exc:
        raise exc
    except Exception as exc:
        raise HTTPException(status_code=500, detail=f"An unexpected error occurred: {exc}")


@router.post("/all/start", dependencies=[Depends(require_admin)])
def start_all():
    """Relance tous les types de surveillance (fichiers, dossiers, IP)."""
    resume_all("file")
    resume_all("folder")
    resume_all("ip")
    return {"ok": True}


@router.post("/all/stop", dependencies=[Depends(require_admin)])
def hard_stop_all():
    """Arrête tous les types de surveillance."""
    stop_all("file")
    stop_all("folder")
    stop_all("ip")
    return {"ok": True}

---------- END OF FILE: backend/app/api/engine.py ----------


---------- START OF FILE: backend/app/api/monitoring.py ----------

# File: backend/app/api/monitoring.py
from typing import List, Any
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.exc import IntegrityError
from datetime import datetime

# Scheduler + scan tasks
from app.core.scheduler import add_interval_job, remove_job, FREQ_SECONDS
from app.services.scan_tasks import scan_file, scan_folder, scan_ip

# Schemas (Pydantic)
from app.models.monitoring import (
    FileItemCreate, FileItemRead,
    IPItemCreate, IPItemRead,
    FolderItemCreate, FolderItemRead
)

# Services (DB CRUD)
from app.services.monitoring_service import (
    get_file_items, get_file_item, create_file_item, update_file_item, delete_file_item,
    get_ip_items, get_ip_item, create_ip_item, update_ip_item, delete_ip_item,
    get_folder_items, get_folder_item, create_folder_item, update_folder_item, delete_folder_item
)

# Auth
from app.core.security import get_current_active_user
from app.db.models import User as ORMUser  # éventuellement utile

# (optionnel) mini logger
import logging
log = logging.getLogger("monitoring-api")

router = APIRouter(
    prefix="/api/monitoring",
    tags=["monitoring"],
    dependencies=[Depends(get_current_active_user)]
)

# -------------------------------------------------------------------------
# Helpers: support dict OU objet (ORM/Pydantic) de façon uniforme
# -------------------------------------------------------------------------

def _val(obj: Any, name: str, default: Any = None) -> Any:
    """Récupère un champ soit en attribut, soit en clé dict, sinon default."""
    if obj is None:
        return default
    if isinstance(obj, dict):
        return obj.get(name, default)
    return getattr(obj, name, default)

def _schedule_file(item: Any) -> None:
    """(Re)pose un job de scan pour un File si status=active, sinon retire."""
    iid = _val(item, "id")
    if iid is None:
        return
    status = _val(item, "status", "active")
    freq = _val(item, "frequency", "hourly")
    path = _val(item, "path")

    if status == "active":
        sec = FREQ_SECONDS.get(freq, 3600)
        try:
            add_interval_job("file", iid, sec, scan_file, item_id=iid, path=path)
            log.debug(f"[scheduler] file #{iid} scheduled every {sec}s (status={status}, freq={freq})")
        except Exception as e:
            log.warning(f"[scheduler] cannot schedule file #{iid}: {e}")
    else:
        try:
            remove_job("file", iid)
            log.debug(f"[scheduler] file #{iid} job removed (status={status})")
        except Exception as e:
            log.warning(f"[scheduler] cannot remove file job #{iid}: {e}")

def _schedule_folder(item: Any) -> None:
    iid = _val(item, "id")
    if iid is None:
        return
    status = _val(item, "status", "active")
    freq = _val(item, "frequency", "hourly")
    path = _val(item, "path")

    if status == "active":
        sec = FREQ_SECONDS.get(freq, 3600)
        try:
            add_interval_job("folder", iid, sec, scan_folder, item_id=iid, path=path)
            log.debug(f"[scheduler] folder #{iid} scheduled every {sec}s (status={status}, freq={freq})")
        except Exception as e:
            log.warning(f"[scheduler] cannot schedule folder #{iid}: {e}")
    else:
        try:
            remove_job("folder", iid)
            log.debug(f"[scheduler] folder #{iid} job removed (status={status})")
        except Exception as e:
            log.warning(f"[scheduler] cannot remove folder job #{iid}: {e}")

def _schedule_ip(item: Any) -> None:
    iid = _val(item, "id")
    if iid is None:
        return
    status = _val(item, "status", "active")
    freq = _val(item, "frequency", "hourly")
    ip = _val(item, "ip")
    hostname = _val(item, "hostname", None)

    if status == "active":
        sec = FREQ_SECONDS.get(freq, 3600)
        try:
            add_interval_job("ip", iid, sec, scan_ip, item_id=iid, ip=ip, hostname=hostname)
            log.debug(f"[scheduler] ip #{iid} scheduled every {sec}s (status={status}, freq={freq})")
        except Exception as e:
            log.warning(f"[scheduler] cannot schedule ip #{iid}: {e}")
    else:
        try:
            remove_job("ip", iid)
            log.debug(f"[scheduler] ip #{iid} job removed (status={status})")
        except Exception as e:
            log.warning(f"[scheduler] cannot remove ip job #{iid}: {e}")

# -------------------------------------------------------------------------
# File monitoring endpoints
# -------------------------------------------------------------------------

@router.get("/files/{file_id}", response_model=FileItemRead)
def read_file_item(file_id: int):
    """Get a single monitored file by ID."""
    item = get_file_item(file_id)
    if not item:
        raise HTTPException(status_code=404, detail="File not found")
    return item

@router.get("/files", response_model=List[FileItemRead])
def read_file_items(skip: int = 0, limit: int = 100):
    return get_file_items(skip=skip, limit=limit)

@router.post("/files", response_model=FileItemRead, status_code=status.HTTP_201_CREATED)
def add_file_item(file_in: FileItemCreate):
    try:
        item = create_file_item(file_in)
        _schedule_file(item)
        return item
    except IntegrityError:
        raise HTTPException(status_code=409, detail="File path already exists")

@router.put("/files/{file_id}", response_model=FileItemRead)
def edit_file_item(file_id: int, file_in: FileItemCreate):
    item = get_file_item(file_id)
    if not item:
        raise HTTPException(status_code=404, detail="File not found")
    item = update_file_item(file_id, file_in)
    _schedule_file(item)
    return item

@router.delete("/files/{file_id}", status_code=status.HTTP_204_NO_CONTENT)
def remove_file_item(file_id: int):
    item = get_file_item(file_id)
    if not item:
        raise HTTPException(status_code=404, detail="File not found")
    delete_file_item(file_id)
    remove_job("file", file_id)
    return None

# -------------------------------------------------------------------------
# IP monitoring endpoints
# -------------------------------------------------------------------------

@router.get("/ips/{ip_id}", response_model=IPItemRead)
def read_ip_item(ip_id: int):
    """Get a single monitored IP by ID."""
    item = get_ip_item(ip_id)
    if not item:
        raise HTTPException(status_code=404, detail="IP not found")
    return item

@router.get("/ips", response_model=List[IPItemRead])
def read_ip_items(skip: int = 0, limit: int = 100):
    return get_ip_items(skip=skip, limit=limit)

@router.post("/ips", response_model=IPItemRead, status_code=status.HTTP_201_CREATED)
def add_ip_item(ip_in: IPItemCreate):
    try:
        item = create_ip_item(ip_in)
        _schedule_ip(item)
        return item
    except IntegrityError:
        raise HTTPException(status_code=409, detail="IP address already exists")

@router.put("/ips/{ip_id}", response_model=IPItemRead)
def edit_ip_item(ip_id: int, ip_in: IPItemCreate):
    item = get_ip_item(ip_id)
    if not item:
        raise HTTPException(status_code=404, detail="IP not found")
    item = update_ip_item(ip_id, ip_in)
    _schedule_ip(item)
    return item

@router.delete("/ips/{ip_id}", status_code=status.HTTP_204_NO_CONTENT)
def remove_ip_item(ip_id: int):
    item = get_ip_item(ip_id)
    if not item:
        raise HTTPException(status_code=404, detail="IP not found")
    delete_ip_item(ip_id)
    remove_job("ip", ip_id)
    return None

# -------------------------------------------------------------------------
# Folder monitoring endpoints
# -------------------------------------------------------------------------

@router.get("/folders/{folder_id}", response_model=FolderItemRead)
def read_folder_item(folder_id: int):
    """Get a single monitored folder by ID."""
    item = get_folder_item(folder_id)
    if not item:
        raise HTTPException(status_code=404, detail="Folder not found")
    return item

@router.get("/folders", response_model=List[FolderItemRead])
def read_folder_items(skip: int = 0, limit: int = 100):
    return get_folder_items(skip=skip, limit=limit)

@router.post("/folders", response_model=FolderItemRead, status_code=status.HTTP_201_CREATED)
def add_folder_item(folder_in: FolderItemCreate):
    try:
        item = create_folder_item(folder_in)
        _schedule_folder(item)
        return item
    except IntegrityError:
        raise HTTPException(status_code=409, detail="Folder already monitored")
    except Exception as e:
        if "UNIQUE constraint failed: monitored_folders.path" in str(e):
            raise HTTPException(status_code=409, detail="Folder already monitored")
        raise

@router.put("/folders/{folder_id}", response_model=FolderItemRead)
def edit_folder_item(folder_id: int, folder_in: FolderItemCreate):
    item = get_folder_item(folder_id)
    if not item:
        raise HTTPException(status_code=404, detail="Folder not found")
    item = update_folder_item(folder_id, folder_in)
    _schedule_folder(item)
    return item

@router.delete("/folders/{folder_id}", status_code=status.HTTP_204_NO_CONTENT)
def remove_folder_item(folder_id: int):
    item = get_folder_item(folder_id)
    if not item:
        raise HTTPException(status_code=404, detail="Folder not found")
    delete_folder_item(folder_id)
    remove_job("folder", folder_id)
    return None

# -------------------------------------------------------------------------
# Scan now endpoints
# -------------------------------------------------------------------------

@router.post("/files/{file_id}/scan-now")
def scan_now_file(file_id: int):
    item = get_file_item(file_id)
    if not item:
        raise HTTPException(status_code=404, detail="File not found")
    # on scanne même si status=paused (action manuelle)
    scan_file(item_id=item["id"] if isinstance(item, dict) else item.id,
                path=item["path"] if isinstance(item, dict) else item.path)
    return {"executed": True, "type": "file_scan", "id": item["id"] if isinstance(item, dict) else item.id,
            "ts": datetime.utcnow().isoformat()}

@router.post("/folders/{folder_id}/scan-now")
def scan_now_folder(folder_id: int):
    item = get_folder_item(folder_id)
    if not item:
        raise HTTPException(status_code=404, detail="Folder not found")
    scan_folder(item_id=item["id"] if isinstance(item, dict) else item.id,
                path=item["path"] if isinstance(item, dict) else item.path)
    return {"executed": True, "type": "folder_scan", "id": item["id"] if isinstance(item, dict) else item.id,
            "ts": datetime.utcnow().isoformat()}

@router.post("/ips/{ip_id}/scan-now")
def scan_now_ip(ip_id: int):
    item = get_ip_item(ip_id)
    if not item:
        raise HTTPException(status_code=404, detail="IP not found")
    scan_ip(item_id=item["id"] if isinstance(item, dict) else item.id,
            ip=item["ip"] if isinstance(item, dict) else item.ip,
            hostname=(item.get("hostname") if isinstance(item, dict) else getattr(item, "hostname", None)))
    return {"executed": True, "type": "ip_scan", "id": item["id"] if isinstance(item, dict) else item.id,
            "ts": datetime.utcnow().isoformat()}
---------- END OF FILE: backend/app/api/monitoring.py ----------


---------- START OF FILE: backend/app/services/monitoring_service.py ----------

# File: backend/app/services/monitoring_service.py
from typing import List, Optional
from sqlalchemy.orm import Session
from sqlalchemy.exc import NoResultFound
from sqlalchemy.exc import IntegrityError


from app.db.session import SessionLocal
from app.db.models import MonitoredFile, MonitoredIP, MonitoredFolder
from app.models.monitoring import FileItemCreate, IPItemCreate, FolderItemCreate


# ---- Monitored Files CRUD ----

def get_file_items(skip: int = 0, limit: int = 100) -> List[MonitoredFile]:
    db: Session = SessionLocal()
    items = db.query(MonitoredFile).offset(skip).limit(limit).all()
    db.close()
    return items


def get_file_item(file_id: int) -> Optional[MonitoredFile]:
    db: Session = SessionLocal()
    item = db.query(MonitoredFile).filter(MonitoredFile.id == file_id).first()
    db.close()
    return item



def create_file_item(file_in: FileItemCreate) -> MonitoredFile:
    db: Session = SessionLocal()
    try:
        existing = db.query(MonitoredFile).filter(MonitoredFile.path == file_in.path).first()
        if existing:
            db.close()
            return existing
        db_item = MonitoredFile(path=file_in.path, frequency=file_in.frequency)
        db.add(db_item)
        db.commit()
        db.refresh(db_item)
        db.close()
        return db_item
    except IntegrityError:
        db.rollback()
        db.close()
        raise

def update_file_item(file_id: int, file_in: FileItemCreate) -> MonitoredFile:
    db: Session = SessionLocal()
    item = db.query(MonitoredFile).filter(MonitoredFile.id == file_id).first()
    if not item:
        db.close()
        raise NoResultFound(f"File item {file_id} not found")
    item.path = file_in.path
    item.frequency = file_in.frequency
    db.commit()
    db.refresh(item)
    db.close()
    return item


def delete_file_item(file_id: int) -> None:
    db: Session = SessionLocal()
    item = db.query(MonitoredFile).filter(MonitoredFile.id == file_id).first()
    if item:
        db.delete(item)
        db.commit()
    db.close()


# ---- Monitored IPs CRUD ----

def get_ip_items(skip: int = 0, limit: int = 100) -> List[MonitoredIP]:
    db: Session = SessionLocal()
    items = db.query(MonitoredIP).offset(skip).limit(limit).all()
    db.close()
    return items


def get_ip_item(ip_id: int) -> Optional[MonitoredIP]:
    db: Session = SessionLocal()
    item = db.query(MonitoredIP).filter(MonitoredIP.id == ip_id).first()
    db.close()
    return item


def create_ip_item(ip_in: IPItemCreate) -> MonitoredIP:
    db: Session = SessionLocal()
    try:
        existing = db.query(MonitoredIP).filter(MonitoredIP.ip == ip_in.ip).first()
        if existing:
            db.close()
            return existing
        db_item = MonitoredIP(
            ip=ip_in.ip,
            hostname=ip_in.hostname,
            frequency=ip_in.frequency
        )
        db.add(db_item)
        db.commit()
        db.refresh(db_item)
        db.close()
        return db_item
    except IntegrityError:
        db.rollback()
        db.close()
        raise


def update_ip_item(ip_id: int, ip_in: IPItemCreate) -> MonitoredIP:
    db: Session = SessionLocal()
    item = db.query(MonitoredIP).filter(MonitoredIP.id == ip_id).first()
    if not item:
        db.close()
        raise NoResultFound(f"IP item {ip_id} not found")
    item.ip = ip_in.ip
    item.hostname = ip_in.hostname
    item.frequency = ip_in.frequency
    db.commit()
    db.refresh(item)
    db.close()
    return item


def delete_ip_item(ip_id: int) -> None:
    db: Session = SessionLocal()
    item = db.query(MonitoredIP).filter(MonitoredIP.id == ip_id).first()
    if item:
        db.delete(item)
        db.commit()
    db.close()


# ---- Monitored Folders CRUD ----

def get_folder_items(skip: int = 0, limit: int = 100) -> List[MonitoredFolder]:
    db: Session = SessionLocal()
    items = db.query(MonitoredFolder).offset(skip).limit(limit).all()
    db.close()
    return items


def get_folder_item(folder_id: int) -> Optional[MonitoredFolder]:
    db: Session = SessionLocal()
    item = db.query(MonitoredFolder).filter(MonitoredFolder.id == folder_id).first()
    db.close()
    return item


def create_folder_item(folder_in: FolderItemCreate) -> MonitoredFolder:
    db: Session = SessionLocal()
    try:
        
        existing = db.query(MonitoredFolder).filter(MonitoredFolder.path == folder_in.path).first()
        if existing:
            db.close()
            return existing
        db_item = MonitoredFolder(path=folder_in.path, frequency=folder_in.frequency)
        db.add(db_item); db.commit(); db.refresh(db_item)
        db.close()
        return db_item
    except IntegrityError:
        db.rollback()
        db.close()
        
        raise


def update_folder_item(folder_id: int, folder_in: FolderItemCreate) -> MonitoredFolder:
    db: Session = SessionLocal()
    item = db.query(MonitoredFolder).filter(MonitoredFolder.id == folder_id).first()
    if not item:
        db.close()
        raise NoResultFound(f"Folder item {folder_id} not found")
    item.path = folder_in.path
    item.frequency = folder_in.frequency
    db.commit()
    db.refresh(item)
    db.close()
    return item


def delete_folder_item(folder_id: int) -> None:
    db: Session = SessionLocal()
    item = db.query(MonitoredFolder).filter(MonitoredFolder.id == folder_id).first()
    if item:
        db.delete(item)
        db.commit()
    db.close()


# ------------------------------
# ---- Status update functions ----

def update_file_status(file_id: int, status: str) -> MonitoredFile:
    db: Session = SessionLocal()
    try:
        item = db.query(MonitoredFile).filter(MonitoredFile.id == file_id).first()
        if not item:
            raise NoResultFound(f"File item {file_id} not found")

        if status == "paused":
            status = "stopped"
        if status not in {"active", "stopped"}:
            raise ValueError(f"Unsupported file status: {status}")

        item.status = status

        if status == "stopped":
            # Hard stop: drop hashes so a fresh baseline is rebuilt on next run
            item.baseline_hash = None
            item.current_hash = None

        db.commit()
        db.refresh(item)
        return item
    finally:
        db.close()


def update_folder_status(folder_id: int, status: str) -> MonitoredFolder:
    db: Session = SessionLocal()
    try:
        item = db.query(MonitoredFolder).filter(MonitoredFolder.id == folder_id).first()
        if not item:
            raise NoResultFound(f"Folder item {folder_id} not found")

        if status == "paused":
            status = "stopped"
        if status not in {"active", "stopped"}:
            raise ValueError(f"Unsupported folder status: {status}")

        item.status = status

        if status == "stopped":
            item.folder_hash = None
            item.file_count = 0

        db.commit()
        db.refresh(item)
        return item
    finally:
        db.close()


def update_ip_status(ip_id: int, status: str) -> MonitoredIP:
    db: Session = SessionLocal()
    try:
        item = db.query(MonitoredIP).filter(MonitoredIP.id == ip_id).first()
        if not item:
            raise NoResultFound(f"IP item {ip_id} not found")

        if status == "paused":
            status = "stopped"
        if status not in {"active", "stopped"}:
            raise ValueError(f"Unsupported IP status: {status}")

        item.status = status

        if status == "stopped":
            item.last_status = None

        db.commit()
        db.refresh(item)
        return item
    finally:
        db.close()


---------- END OF FILE: backend/app/services/monitoring_service.py ----------


---------- START OF FILE: hids-web/src/components/EngineCard.jsx ----------

import { useState } from "react";


export default function EngineCard({ title, counts = {}, onAction, disabled = false }) {
    const { total = 0, active = 0, paused = 0 } = counts;
    const [isLoading, setIsLoading] = useState(false);
    
    const status = active > 0 ? "running" : total === 0 ? "stopped" : paused === total ? "paused" : "stopped";

    const tone = status === "running" ? "success" : status === "paused" ? "warn" : "danger";
    const dot = tone === "success" ? "bg-success" : tone === "warn" ? "bg-warn" : "bg-danger";

    // Boutons conditionnels
    const actions = status === "running"
        ? [{ key: "pause-all", label: "Pause" }, { key: "stop-all", label: "Stop" }]
        : status === "paused"
        ? [{ key: "resume-all", label: "Resume" }, { key: "stop-all", label: "Stop" }]
        : [{ key: "resume-all", label: "Start" }];

    const handleAction = async (actionKey) => {
        if (disabled || isLoading) return;
        
        setIsLoading(true);
        try {
            await onAction(actionKey);
        } catch (error) {
            console.error("Action failed:", error);
        } finally {
            // Reset après un délai pour voir la confirmation
            setTimeout(() => setIsLoading(false), 1000);
        }
    };

    return (
        <div className={`card p-4 transition-all duration-200 ${isLoading ? 'opacity-70' : ''}`}>
            <div className="text-xs text-muted">{title}</div>

            <div className="mt-1 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                {/* Etat */}
                <div>
                    <div className="text-2xl font-semibold flex items-center gap-2 leading-none">
                        <span className={`inline-block w-2 h-2 rounded-full ${dot} ${isLoading ? 'animate-pulse' : ''}`} />
                        {isLoading ? "Updating..." : status.charAt(0).toUpperCase() + status.slice(1)}
                    </div>
                    <div className="text-xs text-muted mt-1">
                        {active}/{total} active · {paused} paused
                    </div>
                </div>

                {/* Actions */}
                <div className="flex flex-wrap gap-2">
                    {actions.map((a) => (
                        <button
                            key={a.key}
                            className={`btn px-3 py-1.5 text-sm transition-all ${
                                disabled || isLoading ? 'opacity-50 cursor-not-allowed' : 'hover:scale-105'
                            }`}
                            onClick={() => handleAction(a.key)}
                            disabled={disabled || isLoading}
                        >
                            {isLoading ? "..." : a.label}
                        </button>
                    ))}
                </div>
            </div>
        </div>
    );
}
---------- END OF FILE: hids-web/src/components/EngineCard.jsx ----------


---------- START OF FILE: hids-web/src/pages/Dashboard.jsx ----------

import { useEffect, useMemo, useState } from "react";
import { useAuth } from "../context/AuthProvider";
import { api } from "../lib/api";
import EngineCard from "../components/EngineCard";
import StatCard from "../components/StatCard";
import {
    ResponsiveContainer, PieChart, Pie, Cell, Legend, Tooltip,
    LineChart, Line, XAxis, YAxis, Brush
} from "recharts";

// Fonction utilitaire pour "bucketer" les timestamps
function bucket(ts, stepMs) {
  return Math.floor(new Date(ts).getTime() / stepMs) * stepMs;
}

// Préréglages de la plage de temps
const PRESETS = [
    { key: "2h", label: "Last 2h", ms: 2 * 60 * 60 * 1000 },
    { key: "24h", label: "Last 24h", ms: 24 * 60 * 60 * 1000 },
    { key: "7d", label: "Last 7d", ms: 7 * 24 * 60 * 60 * 1000 },
    { key: "30d", label: "Last 30d", ms: 30 * 24 * 60 * 60 * 1000 },
    { key: "365d", label: "Last 1y", ms: 365 * 24 * 60 * 60 * 1000 },
];

// Préréglages d'intervalle pour le graphique en ligne
const INTERVALS = [
    { key: "auto", label: "Auto", ms: null },
    { key: "1m", label: "1 min", ms: 60 * 1000 },
    { key: "5m", label: "5 min", ms: 5 * 60 * 1000 },
    { key: "15m", label: "15 min", ms: 15 * 60 * 1000 },
    { key: "1h", label: "1 hour", ms: 60 * 60 * 1000 },
    { key: "1d", label: "1 day", ms: 24 * 60 * 60 * 1000 },
];

// Choix automatique du pas de temps
const pickAutoStep = (rangeMs) => rangeMs <= 6 * 60 * 60 * 1000 ? 60 * 1000
  : rangeMs <= 3 * 24 * 60 * 60 * 1000 ? 60 * 60 * 1000 : 24 * 60 * 60 * 1000;

// Formatage des étiquettes de temps
const fmtTick = (tsMs, rangeMs) => {
    const d = new Date(tsMs);
    if (rangeMs <= 24 * 60 * 60 * 1000) return d.toLocaleTimeString();
    if (rangeMs <= 30 * 24 * 60 * 60 * 1000)
        return d.toLocaleDateString() + " " + d.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
    return d.toLocaleDateString();
};

export default function Dashboard() {
    const { token } = useAuth();
    const [metrics, setMetrics] = useState(null);
    const [engine, setEngine] = useState(null);
    const [events, setEvents] = useState([]);
    const [error, setError] = useState(null);

    // Contrôles de plage pour le graphique temporel
    const [mode, setMode] = useState("preset");
    const [preset, setPreset] = useState("2h");
    const [customStart, setCustomStart] = useState(() => {
        const t = new Date(Date.now() - 2 * 60 * 60 * 1000);
        return new Date(t.getTime() - t.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
    });
    const [customEnd, setCustomEnd] = useState(() => {
        const t = new Date();
        return new Date(t.getTime() - t.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
    });
    const [interval, setInterval] = useState("auto");

    const reload = async () => {
        try {
        // Effacer l'erreur précédente
        setError(null);
        // Appels API pour les métriques, l'activité et les alertes
        const [m, activityData, alertsData] = await Promise.all([
            api.metrics(token),
            api.listHidsLog(token, { type: "activity", page: 1, limit: 50 }),
            api.listHidsLog(token, { type: "alerts", page: 1, limit: 50 }),
        ]);
        
        // Combinaison et tri des événements par date
        const combinedEvents = [
            ...(activityData?.lines || []),
            ...(alertsData?.lines || [])
        ].sort((a, b) => new Date(b.ts) - new Date(a.ts));

        // Obtenir l'état du moteur ou utiliser un état de secours
        let s = null;
        try { s = await api.fetchJson("/engine/state", { token }); }
        catch {
            const mm = m?.monitored ?? {};
            const f = mm.files ?? { total: 0, active: 0 };
            const d = mm.folders ?? { total: 0, active: 0 };
            const ip = mm.ips ?? { total: 0, active: 0 };
            const derived = (base) => {
            const stopped = Math.max(0, base.total - base.active);
            return {
                total: base.total,
                active: base.active,
                paused: 0,
                stopped,
                mode: base.active > 0 ? "running" : stopped > 0 ? "stopped" : "paused",
            };
            };
            const fileCounts = derived(f);
            const folderCounts = derived(d);
            const ipCounts = derived(ip);
            const totalActive = fileCounts.active + folderCounts.active + ipCounts.active;
            const totalStopped = fileCounts.stopped + folderCounts.stopped + ipCounts.stopped;
            const engineStatus = totalActive > 0 ? "running" : totalStopped > 0 ? "stopped" : "paused";
            s = {
            engine: engineStatus,
            file: fileCounts,
            folder: folderCounts,
            ip: ipCounts,
            };
        }
        setMetrics(m);
        setEvents(combinedEvents);
        setEngine(s);
        } catch (error) {
        console.error("Failed to reload dashboard data:", error);
        setError("Erreur de chargement des données. Veuillez vérifier la connexion ou les logs du backend.");
        }
    };

    useEffect(() => { reload().catch(console.error); }, [token]);

    // Donut (proportions)
    const donutData = useMemo(() => {
        const mm = metrics?.monitored ?? { files: { total: 0 }, folders: { total: 0 }, ips: { total: 0 }, total: 0 };
        return [
        { name: "Files", value: mm.files?.total || 0 },
        { name: "Folders", value: mm.folders?.total || 0 },
        { name: "IPs", value: mm.ips?.total || 0 },
        ];
    }, [metrics]);
    const DONUT_COLORS = ["#60a5fa", "#a78bfa", "#34d399"];

    // Mini graphique temporel
    const eventsOverTime = useMemo(() => {
        let startMs, endMs;
        if (mode === "preset") {
        const p = PRESETS.find(p => p.key === preset) ?? PRESETS[0];
        endMs = Date.now(); startMs = endMs - p.ms;
        } else {
        const s = Date.parse(customStart); const e = Date.parse(customEnd);
        endMs = Number.isFinite(e) ? e : Date.now();
        startMs = Number.isFinite(s) ? s : endMs - 2 * 60 * 60 * 1000;
        if (startMs > endMs) [startMs, endMs] = [endMs - 60 * 60 * 1000, endMs];
        }
        const manual = INTERVALS.find(i => i.key === interval)?.ms ?? null;
        const STEP = manual || pickAutoStep(endMs - startMs);

        const table = new Map();
        for (const ev of events) {
        const t = +new Date(ev.ts || 0); if (!Number.isFinite(t) || t < startMs || t > endMs) continue;
        const b = bucket(t, STEP); table.set(b, (table.get(b) || 0) + 1);
        }
        const out = [];
        for (let t = bucket(startMs, STEP); t <= endMs; t += STEP) out.push({ ts: t, count: table.get(t) || 0 });
        return { points: out, startMs, endMs };
    }, [events, mode, preset, customStart, customEnd, interval]);

    const doAction = async (kind, action) => {
        await api.fetchJson(`/engine/${kind}/${action}`, { method: "POST", token });
        await reload();
    };
    


    if (error) {
        return (
        <div className="flex items-center justify-center h-full text-center text-red-500">
            <p>{error}</p>
        </div>
        );
    }

    if (!metrics) return <div>Loading…</div>;
    const m = metrics.monitored;

    return (
        <div className="space-y-6">
            {/* Ligne 1: cartes du moteur + compteurs */}
            <div className="grid gap-4 xl:grid-cols-4 md:grid-cols-2">
                <EngineCard title="File Monitoring" counts={engine?.file} onAction={(a) => doAction("file", a)} />
                <EngineCard title="Folder Monitoring" counts={engine?.folder} onAction={(a) => doAction("folder", a)} />
                <EngineCard title="IP Monitoring" counts={engine?.ip} onAction={(a) => doAction("ip", a)} />
                <StatCard title="Entities Monitored" value={m.total}
                    hint={`${m.files.total} files · ${m.folders.total} folders · ${m.ips.total} IPs`} />
            </div>

            {/* /* Ligne 2: graphique en anneau + activité récente */}
            <div className="grid gap-4 xl:grid-cols-2 md:grid-cols-2 ">
                {/* Le graphique en anneau occupe 60% de la largeur */}
                <div className="card p-4 flex-[60] h-[37vh] flex flex-col">
                    <div className="mb-2 text-sm text-muted">Entities by Type</div>
                    <div className="h-96">
                        <ResponsiveContainer width="100%" height="100%">
                            <PieChart>
                                <Pie data={donutData} dataKey="value" nameKey="name" innerRadius="50%" outerRadius="80%">
                                    {donutData.map((entry, idx) => <Cell key={idx} fill={DONUT_COLORS[idx % DONUT_COLORS.length]} />)}
                                </Pie>
                                <Tooltip />
                                <Legend />
                            </PieChart>
                        </ResponsiveContainer>
                    </div>
                </div>

                {/* L'activité récente occupe 40% de la largeur */}
                <div className="card p-4 flex-[40] h-[37vh] flex flex-col">
                    <div className="mb-2 text-sm text-muted">Recent activity</div>
                        <ul className="soft-scroll space-y-2 max-h-96 overflow-auto pr-2">
                            {events.slice(0, 25).map((e, i) => { // Afficher plus d'événements
                                const when = e?.ts ? new Date(e.ts).toLocaleString() : "—";
                                return (
                                    <li key={i} className="text-sm text-muted flex items-center gap-2">
                                        {e.level === "WARNING" && (
                                            <span className="badge bg-yellow-500/20 text-yellow-300">warning</span>
                                        )}
                                        {e.level === "INFO" && (
                                            <span className="badge bg-green-500/20 text-green-300">info</span>
                                        )}
                                        {e.level === "ERROR" && (
                                            <span className="badge bg-red-500 text-white">error</span>
                                        )}
                                        <span className="text-white truncate">{e.msg}</span>
                                        <span className="ml-auto flex-none">{when}</span>
                                    </li>
                                );
                            })}
                            {events.length === 0 && <div className="text-muted">No events yet</div>}
                        </ul>
                    </div>
                </div>

            {/* Ligne 3: petit graphique temporel (inchangé) */}
            <div className="card p-4">
                <div className="mb-3 flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
                    <div className="text-sm text-muted">Events Over Time</div>
                    <div className="flex flex-wrap gap-2 items-center">
                        <div className="flex rounded-md overflow-hidden border border-white/10">
                            <button
                                onClick={() => setMode("preset")}
                                className={`px-3 py-1.5 text-sm ${mode === "preset" ? "bg-panel2" : "bg-panel/50"}`}
                                title="Use quick presets"
                            >
                                Presets
                            </button>
                            <button
                                onClick={() => setMode("custom")}
                                className={`px-3 py-1.5 text-sm ${mode === "custom" ? "bg-panel2" : "bg-panel/50"}`}
                                title="Pick an absolute date range"
                            >
                                Custom
                            </button>
                        </div>
                        {mode === "preset" ? (
                            <select
                                value={preset}
                                onChange={e => setPreset(e.target.value)}
                                className="bg-panel2 border border-white/10 rounded-md text-sm px-2 py-1 focus:outline-none"
                                title="Time range"
                            >
                                {PRESETS.map(r => <option key={r.key} value={r.key}>{r.label}</option>)}
                            </select>
                        ) : (
                            <div className="flex flex-wrap items-center gap-2">
                                <label className="text-xs text-muted">From</label>
                                <input
                                    type="datetime-local"
                                    value={customStart}
                                    onChange={e => setCustomStart(e.target.value)}
                                    className="bg-panel2 border border-white/10 rounded-md text-sm px-2 py-1"
                                />
                                <label className="text-xs text-muted">to</label>
                                <input
                                    type="datetime-local"
                                    value={customEnd}
                                    onChange={e => setCustomEnd(e.target.value)}
                                    className="bg-panel2 border border-white/10 rounded-md text-sm px-2 py-1"
                                />
                            </div>
                        )}
                        <select
                            value={interval}
                            onChange={e => setInterval(e.target.value)}
                            className="bg-panel2 border border-white/10 rounded-md text-sm px-2 py-1 focus:outline-none"
                            title="Aggregation"
                        >
                            {INTERVALS.map(i => <option key={i.key} value={i.key}>{i.label}</option>)}
                        </select>
                    </div>
                </div>
                <div className="h-56">
                    <ResponsiveContainer width="100%" height="100%">
                        <LineChart data={eventsOverTime.points}>
                        <XAxis
                            dataKey="ts"
                            type="number"
                            domain={["dataMin", "dataMax"]}
                            tickFormatter={(v) => fmtTick(v, eventsOverTime.endMs - eventsOverTime.startMs)}
                        />
                        <YAxis allowDecimals={false} />
                        <Tooltip
                            labelFormatter={(v) => new Date(v).toLocaleString()}
                            formatter={(val) => [val, "alerts"]}
                        />
                        <Line type="monotone" dataKey="count" dot={false} />
                        <Brush
                            dataKey="ts"
                            height={22}
                            travellerWidth={12}
                            tickFormatter={(v) => fmtTick(v, eventsOverTime.endMs - eventsOverTime.startMs)}
                        />
                        </LineChart>
                    </ResponsiveContainer>
                </div>
            </div>
        </div>
    );
}

---------- END OF FILE: hids-web/src/pages/Dashboard.jsx ----------


---------- START OF FILE: hids-web/src/pages/Settings.jsx ----------

// Fichier : src/pages/Settings.jsx

import { useEffect, useMemo, useState } from "react";
import { useAuth } from "../context/AuthProvider";
import { api } from "../lib/api";
import { Pencil, Trash2, Check, X, Play, Pause, Square } from "lucide-react";

/* ---------- UI helpers ---------- */
const Badge = ({ children, tone = "muted" }) => {
    const map = {
        ok: "bg-emerald-500/20 text-emerald-300",
        warn: "bg-amber-500/20 text-amber-300",
        danger: "bg-red-500/20 text-red-300",
        muted: "bg-white/5 text-muted",
        info: "bg-sky-500/20 text-sky-300",
        role: "bg-purple-500/20 text-purple-300",
    };
    return (
        <span className={`px-2 py-0.5 rounded-full text-xs border border-white/10 ${map[tone]}`}>
        {children}
        </span>
    );
};

const IconButton = ({ title, onClick, children, disabled=false }) => (
    <button
        className="p-2 rounded-md border border-white/10 bg-panel2 hover:bg-panel transition disabled:opacity-50 disabled:cursor-not-allowed"
        title={title}
        aria-label={title}
        onClick={onClick}
        disabled={disabled}
    >
        {children}
    </button>
);

/* ---------- Modal: Add / Edit password ---------- */
function UserModal({ open, mode, user, onClose, onSave, disabled }) {
    const [username, setUsername] = useState(user?.username || "");
    const [email, setEmail] = useState(user?.email || "");
    const [isAdmin, setIsAdmin] = useState(!!user?.is_admin);
    const [password, setPassword] = useState("");
    const [confirm, setConfirm] = useState("");

    useEffect(() => {
        if (open) {
        setUsername(user?.username || "");
        setEmail(user?.email || "");
        setIsAdmin(!!user?.is_admin);
        setPassword("");
        setConfirm("");
        }
    }, [open, user]);

    if (!open) return null;

    const canSave =
        !disabled &&
        ((mode === "add" && username && email && password && password === confirm) ||
        (mode === "edit" && password && password === confirm));

    const submit = () => {
        if (!canSave) return;
        if (mode === "add") onSave({ username, email, password, is_admin: isAdmin });
        else onSave({ password });
    };

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
        <div className="absolute inset-0 bg-black/60" onClick={onClose} />
        <div className="relative z-10 w-[460px] rounded-xl bg-panel p-4 border border-white/10 shadow-lg">
            <div className="text-lg font-medium mb-4">
            {mode === "add" ? "Add user" : `Change password — ${user?.username}`}
            </div>

            {disabled && (
            <div className="mb-3 px-3 py-2 rounded-md bg-red-500/20 text-red-300">
                Admin required to perform this action.
            </div>
            )}

            <div className="grid gap-3">
            {mode === "add" && (
                <>
                <div className="grid gap-1.5">
                    <label className="text-xs text-muted">Username</label>
                    <input
                    className="bg-panel2 border border-white/10 rounded-md px-3 py-2 disabled:opacity-50"
                    value={username}
                    onChange={e=>setUsername(e.target.value)}
                    placeholder="jdoe"
                    disabled={disabled}
                    />
                </div>
                <div className="grid gap-1.5">
                    <label className="text-xs text-muted">Email</label>
                    <input
                    type="email"
                    className="bg-panel2 border border-white/10 rounded-md px-3 py-2 disabled:opacity-50"
                    value={email}
                    onChange={e=>setEmail(e.target.value)}
                    placeholder="jdoe@example.com"
                    disabled={disabled}
                    />
                </div>
                </>
            )}

            <div className="grid gap-1.5">
                <label className="text-xs text-muted">New password</label>
                <input
                type="password"
                className="bg-panel2 border border-white/10 rounded-md px-3 py-2 disabled:opacity-50"
                value={password}
                onChange={e=>setPassword(e.target.value)}
                placeholder="********"
                disabled={disabled}
                />
            </div>
            <div className="grid gap-1.5">
                <label className="text-xs text-muted">Confirm password</label>
                <div className="relative">
                <input
                    type="password"
                    className={`w-full bg-panel2 border rounded-md px-3 py-2 disabled:opacity-50 ${
                    password && confirm && password!==confirm ? "border-red-500" : "border-white/10"
                    }`}
                    value={confirm}
                    onChange={e=>setConfirm(e.target.value)}
                    placeholder="********"
                    disabled={disabled}
                />
                {password && confirm && password===confirm && (
                    <span className="absolute right-3 top-1/2 -translate-y-1/2 text-emerald-400"><Check size={16}/></span>
                )}
                {password && confirm && password!==confirm && (
                    <span className="absolute right-3 top-1/2 -translate-y-1/2 text-red-400"><X size={16}/></span>
                )}
                </div>
            </div>

            {mode === "add" && (
                <label className="inline-flex items-center gap-2 mt-1 select-none">
                <input type="checkbox" checked={isAdmin} onChange={e=>setIsAdmin(e.target.checked)} disabled={disabled}/>
                <span>Administrator</span>
                </label>
            )}
            </div>

            <div className="mt-4 flex justify-end gap-2">
            <button className="px-3 py-1.5 rounded-md bg-panel/50 border border-white/10" onClick={onClose}>Cancel</button>
            <button className="px-3 py-1.5 rounded-md bg-green-600 hover:bg-green-700 text-white disabled:opacity-50" disabled={!canSave} onClick={submit}>
                Save
            </button>
            </div>
        </div>
        </div>
    );
    }

/* ---------- Main page ---------- */
export default function Settings() {
    const { token, user } = useAuth();
    const isAdmin = !!user?.is_admin;

    const [tab, setTab] = useState("users"); // users | machines | logs

    /* Users */
    const [users, setUsers] = useState([]);
    const [uLoading, setULoading] = useState(false);
    const [uMsg, setUMsg] = useState(null); // on ne l'utilise plus pour "loaded", seulement pour erreurs
    const [modal, setModal] = useState({ open:false, mode:"add", user:null });

    // NEW: search, role filter, pagination
    const [query, setQuery] = useState("");
    const [roleFilter, setRoleFilter] = useState("all"); // all | admin | standard
    const [page, setPage] = useState(1);
    const pageSize = 7;

    const loadUsers = async () => {
        setULoading(true);
        setUMsg(null);
        try {
        const rows = await api.listUsers(token);
        setUsers(rows || []);
        } catch (e) {
        setUMsg({ type:"error", text: e?.body?.detail || "Failed to load users" });
        } finally {
        setULoading(false);
        }
    };

    useEffect(() => {
        if (tab === "users" && isAdmin) {
        loadUsers();
        } else if (tab === "users" && !isAdmin) {
        setUsers([]);
        setUMsg({ type: "warning", text: "Admin privileges are required to view users." });
        }
    }, [tab, isAdmin]); // eslint-disable-line

    // reset pagination quand on change les filtres
    useEffect(() => { setPage(1); }, [query, roleFilter]);

    // Filtres + pagination (client-side)
    const filtered = useMemo(() => {
        const q = query.trim().toLowerCase();
        return (users || []).filter(u => {
        const matchesRole =
            roleFilter === "all" ? true :
            roleFilter === "admin" ? !!u.is_admin :
            !u.is_admin;

        const matchesQuery = !q || [u.username, u.email]
            .some(x => (x || "").toLowerCase().includes(q));

        return matchesRole && matchesQuery;
        });
    }, [users, query, roleFilter]);

    const pageCount = Math.max(1, Math.ceil(filtered.length / pageSize));
    const currentPage = Math.min(page, pageCount);
    const start = (currentPage - 1) * pageSize;
    const visibleUsers = filtered.slice(start, start + pageSize);

    const doAdd = () => setModal({ open:true, mode:"add", user:null });
    const doEdit = (user) => setModal({ open:true, mode:"edit", user });
    const doDelete = async (u) => {
        try { await api.deleteUser(token, u.id); loadUsers(); }
        catch (e) { setUMsg({ type:"error", text: e?.body?.detail || "Delete failed" }); }
    };
    const saveUser = async (payload) => {
        try {
        if (modal.mode === "add") { await api.createUser(token, payload); }
        else { await api.updateUserPassword(token, modal.user.id, payload); }
        setModal({ open:false, mode:"add", user:null });
        loadUsers();
        } catch (e) { setUMsg({ type:"error", text: e?.body?.detail || "Save failed" }); }
    };

    /* Machines */
    const [mState, setMState] = useState("stopped"); // running|stopped|loading
    const [metrics, setMetrics] = useState(null);
    const refreshMachines = async () => {
        try {
        const [state, m] = await Promise.all([api.engineState(token), api.metrics(token)]);
        setMetrics(m?.monitored || null);

        const aggregates = ["file", "folder", "ip"].map((key) => state?.[key] || {});
        const totalActive = aggregates.reduce((acc, cur) => acc + (cur.active || 0), 0);
        const totalPaused = aggregates.reduce((acc, cur) => acc + (cur.paused || 0), 0);
        const totalStopped = aggregates.reduce((acc, cur) => acc + (cur.stopped || 0), 0);

        const nextState = totalActive > 0 ? "running" : totalStopped > 0 ? "stopped" : totalPaused > 0 ? "paused" : "stopped";
        setMState(nextState);
        } catch { /* ignore */ }
    };
    useEffect(() => { if (tab==="machines") refreshMachines(); }, [tab]); // eslint-disable-line

    // const startAll = async () => {
    //     setMState("loading");
    //     try { await api.startAll(token); await refreshMachines(); }
    //     catch { setMState("stopped"); }
    // };
    // const stopAll = async () => {
    //     setMState("loading");
    //     try { await api.stopAll(token); await refreshMachines(); }
    //     catch { setMState("running"); }
    // };
    // const stopAll = async () => {
    //     console.log("CLICK stopAll, token=", token);  // <---
    //     setMState("loading");
    //     try {
    //         console.log("API CALL stopAll...");
    //         await api.stopAll(token);
    //         console.log("API CALL OK");
    //         await refreshMachines();
    //     } catch (e) {
    //         console.error("Erreur stopAll:", e);
    //         setMState("running");
    //     }
    // };

    const startAll = async () => {
        setMState("loading");
        try {
            await api.startAll(token);
            // Attendre un peu puis rafraîchir
            setTimeout(() => {
                refreshMachines().catch(console.error);
            }, 1000);
        } catch (e) {
            console.error("Erreur startAll:", e);
            setTimeout(() => {
                refreshMachines().catch(console.error);
            }, 500);
        }
    };

    const stopAll = async () => {
        console.log("CLICK stopAll, token=", token);
        setMState("loading");
        try {
            console.log("API CALL stopAll...");
            await api.stopAll(token);
            console.log("API CALL OK");
            // Attendre un peu puis rafraîchir
            setTimeout(() => {
                refreshMachines().catch(console.error);
            }, 1000);
        } catch (e) {
            console.error("Erreur stopAll:", e);
            // En cas d'erreur, essayer de rafraîchir quand même
            setTimeout(() => {
                refreshMachines().catch(console.error);
            }, 500);
        }
    };


    /* Logs purge (inchangé pour l’instant) */
    const [logType, setLogType] = useState("activity");
    const [level, setLevel] = useState("");
    const [from, setFrom] = useState("");
    const [to, setTo] = useState("");
    const [lMsg, setLMsg] = useState(null);
    const purge = async () => {
        if (!window.confirm("Are you sure you want to purge logs with the selected filters? This action cannot be undone.")) {
            return;
        }
        setLMsg(null);
        try { await api.purgeHidsLog(token, { type: logType, level: level || undefined, from: from || undefined, to: to || undefined }); setLMsg({ type:"success", text:"Logs purged" }); }
        catch (e) { setLMsg({ type:"error", text: e?.body?.detail || "Purge failed" }); }
    };
    const clearAllOfType = async () => {
        if (!window.confirm(`Are you sure you want to clear ALL ${logType} logs? This action cannot be undone.`)) {
            return;
        }
        setLMsg(null);
        try {
            await api.clearHidsLog(token, { type: logType });
            setLMsg({ type:"success", text:`All ${logType} logs cleared.` });
        } catch (e) {
            setLMsg({ type:"error", text: e?.body?.detail || "Clear failed" });
        }
    };

    return (
        <div className="space-y-6">
            {/* Admin banner */}
            {user && !isAdmin && (
                <div className="px-4 py-2 rounded-md bg-amber-500/20 text-amber-300">
                You are logged in as a non-admin user. All Settings actions are disabled.
                </div>
            )}

            <div className="flex items-center justify-between">
                <div className="flex gap-2">
                {["users","machines","logs"].map(t => (
                    <button key={t}
                    onClick={()=>setTab(t)}
                    className={`px-3 py-1.5 rounded-md border capitalize ${tab===t ? "bg-panel2 border-white/10" : "bg-panel/50 border-white/5"}`}>
                    {t}
                    </button>
                ))}
                </div>
            </div>

            {/* USERS TAB */}
            {tab==="users" && (
                <div className="space-y-6"> 
                    {/* Erreurs uniquement (plus de bannière "X users loaded") */}
                    {uMsg?.type==="error" && (
                        <div className="mb-1 px-3 py-2 rounded-md bg-red-500/20 text-red-300">
                        {uMsg.text}
                        </div>
                    )}

                    {/* Barre filtres/recherche */}
                    <div className="flex flex-wrap gap-2 items-center justify-between card p-3">
                        <div className="flex gap-2 items-center">
                        <select
                            value={roleFilter}
                            onChange={e=>setRoleFilter(e.target.value)}
                            className="bg-panel2 border border-white/10 rounded-md px-2 py-1"
                        >
                            <option value="all">All users</option>
                            <option value="admin">Admins</option>
                            <option value="standard">Standard</option>
                        </select>

                        <input
                            value={query}
                            onChange={e=>setQuery(e.target.value)}
                            placeholder="Search username or email…"
                            className="bg-panel2 border border-white/10 rounded-md px-3 py-1.5 w-64"
                        />
                        </div>

                        <button
                        onClick={doAdd}
                        className="px-3 py-1.5 rounded-md border border-white/10 bg-panel2 hover:bg-panel disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled={!isAdmin}
                        title={!isAdmin ? "Admin required" : "Add user"}
                        >
                        + Add user
                        </button>
                    </div>

                    {/* Table */}
                    <div className="card rounded-xl overflow-hidden">
                        <table className="w-full text-sm">
                            <thead className="bg-white/5 text-muted">
                                <tr>
                                <th className="text-left px-4 py-3">Username</th>
                                <th className="text-left px-4 py-3">Email</th>
                                <th className="text-left px-4 py-3">Role</th>
                                <th className="text-right px-4 py-3">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {uLoading && (
                                <tr><td colSpan="4" className="px-4 py-6 text-center text-muted">Loading users…</td></tr>
                                )}
                                {!uLoading && visibleUsers.length === 0 && (
                                <tr><td colSpan="4" className="px-4 py-6 text-center text-muted">No users to display.</td></tr>
                                )}
                                {visibleUsers.map(u => (
                                <tr key={u.id} className="border-t border-white/5">
                                    <td className="px-4 py-2">{u.username}</td>
                                    <td className="px-4 py-2">{u.email || "—"}</td>
                                    <td className="px-4 py-2">
                                    <Badge tone={u.is_admin ? "role" : "muted"}>{u.is_admin ? "Admin" : "Standard"}</Badge>
                                    </td>
                                    <td className="px-4 py-2">
                                    <div className="flex justify-end gap-2">
                                        <IconButton title={!isAdmin ? "Admin required" : "Change password"} onClick={()=>doEdit(u)} disabled={!isAdmin}><Pencil size={16}/></IconButton>
                                        <IconButton title={!isAdmin ? "Admin required" : "Delete user"} onClick={()=>doDelete(u)} disabled={!isAdmin}><Trash2 size={16}/></IconButton>
                                    </div>
                                    </td>
                                </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>

                    {/* Pagination */}
                    <div className="flex items-center justify-between">
                        <div className="text-xs text-muted">
                        Page {currentPage} / {pageCount} — {filtered.length} user{filtered.length!==1 ? "s" : ""}
                        </div>
                        <div className="flex gap-2">
                        <button
                            className="px-3 py-1.5 rounded-md border border-white/10 bg-panel2 disabled:opacity-50"
                            onClick={()=>setPage(p=>Math.max(1, p-1))}
                            disabled={currentPage<=1}
                            title="Previous page"
                            aria-label="Previous page"
                        >
                            Prev
                        </button>
                        <button
                            className="px-3 py-1.5 rounded-md border border-white/10 bg-panel2 disabled:opacity-50"
                            onClick={()=>setPage(p=>Math.min(pageCount, p+1))}
                            disabled={currentPage>=pageCount}
                            title="Next page"
                            aria-label="Next page"
                        >
                            Next
                        </button>
                        </div>
                    </div>

                    <UserModal
                        open={modal.open}
                        mode={modal.mode}
                        user={modal.user}
                        onClose={()=>setModal({ open:false, mode:"add", user:null })}
                        onSave={saveUser}
                        disabled={!isAdmin}
                    />
                </div>
            )}

            {/* MACHINES TAB */}
            {tab==="machines" && (
                <div className="grid gap-6 md:grid-cols-2">
                    <div className="card p-4 flex flex-col items-center justify-center">
                        <h3 className="text-lg font-medium mb-4">Global control</h3>
                        <div className={`relative w-44 h-44 mb-3 ${!isAdmin ? "opacity-60" : ""}`}>
                            {mState==="running" && <div className="absolute inset-0 rounded-full bg-emerald-500/10 animate-ping" />}
                            <div className="w-full h-full rounded-full bg-panel2 border-2 border-white/10 flex items-center justify-center">
                                {mState==="stopped" && (
                                <button
                                    onClick={startAll}
                                    disabled={!isAdmin}
                                    className="w-20 h-20 rounded-full bg-emerald-600/20 hover:bg-emerald-600/30 border border-white/10 flex items-center justify-center disabled:cursor-not-allowed"
                                    title="Start all engines"
                                    aria-label="Start all engines"
                                >
                                    <Play size={36} className="text-emerald-400"/>

                                </button>
                                )}
                                {mState==="paused" && (
                                <div className="flex gap-3">
                                    <button
                                        onClick={startAll}
                                        disabled={!isAdmin}
                                        className="w-20 h-20 rounded-full bg-emerald-600/20 hover:bg-emerald-600/30 border border-white/10 flex items-center justify-center disabled:cursor-not-allowed"
                                        title="Resume all engines"
                                        aria-label="Resume all engines"
                                    >
                                        <Play size={36} className="text-emerald-300"/>
                                    </button>
                                    <button
                                        onClick={stopAll}
                                        disabled={!isAdmin}
                                        className="w-20 h-20 rounded-full bg-red-600/20 hover:bg-red-600/30 border border-white/10 flex items-center justify-center disabled:cursor-not-allowed"
                                        title="Stop all engines"
                                        aria-label="Stop all engines"
                                    >
                                        <Square size={32} className="text-red-300"/>
                                    </button>
                                </div>
                                )}
                                {mState==="running" && (
                                <button
                                    onClick={stopAll}
                                    disabled={!isAdmin}
                                    className="w-20 h-20 rounded-full bg-red-600/20 hover:bg-red-600/30 border border-white/10 flex items-center justify-center disabled:cursor-not-allowed"
                                    title="Stop all engines"
                                    aria-label="Stop all engines"
                                >
                                    <Pause size={36} className="text-red-400"/>
                                </button>
                                )}
                                {mState==="loading" && (
                                <svg className="animate-spin text-white" viewBox="0 0 24 24" width="48" height="48" role="img" aria-label="Loading">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"/>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
                                </svg>
                                )}
                            </div>
                        </div>
                        <div className="text-muted text-sm">
                            {mState==="stopped" && "All engines stopped"}
                            {mState==="paused" && "Engines paused"}
                            {mState==="running" && "Engines running"}
                            {mState==="loading" && "Updating..."}
                        </div>
                        {!isAdmin && <div className="mt-2 text-xs text-muted">Admin required to start/stop.</div>}
                    </div>

                    <div className="card p-4">
                        <h3 className="text-lg font-medium mb-4">Monitored entities</h3>
                        <div className="grid grid-cols-3 gap-3">
                            <div className="rounded-xl p-3 bg-white/5">
                                <div className="text-muted text-xs mb-1">Files</div>
                                <div className="text-2xl font-semibold">{metrics?.files?.total ?? "—"}</div>
                            </div>
                            <div className="rounded-xl p-3 bg-white/5">
                                <div className="text-muted text-xs mb-1">Folders</div>
                                <div className="text-2xl font-semibold">{metrics?.folders?.total ?? "—"}</div>
                            </div>
                            <div className="rounded-xl p-3 bg-white/5">
                                <div className="text-muted text-xs mb-1">IPs</div>
                                <div className="text-2xl font-semibold">{metrics?.ips?.total ?? "—"}</div>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* LOGS TAB */}
            {tab==="logs" && (
                <div className="card p-4 space-y-4">
                {lMsg && (
                    <div className={`px-3 py-2 rounded-md ${lMsg.type==="success" ? "bg-emerald-500/20 text-emerald-300" : "bg-red-500/20 text-red-300"}`}>{lMsg.text}</div>
                )}
                {!isAdmin && (
                    <div className="px-3 py-2 rounded-md bg-amber-500/20 text-amber-300">
                    Viewing only — admin required to purge or clear logs.
                    </div>
                )}
                <div className="grid md:grid-cols-2 gap-4">
                    <div className="space-y-3">
                    <div className="text-sm text-muted">Target</div>
                    <div className="flex flex-wrap gap-2">
                        <select value={logType} onChange={e=>setLogType(e.target.value)} className="bg-panel2 border border-white/10 rounded-md px-2 py-1">
                        <option value="activity">Activity logs</option>
                        <option value="alerts">Alerts logs</option>
                        </select>
                        <select value={level} onChange={e=>setLevel(e.target.value)} className="bg-panel2 border border-white/10 rounded-md px-2 py-1">
                        <option value="">Level: any</option>
                        <option>INFO</option>
                        <option>WARNING</option>
                        <option>ERROR</option>
                        <option>CRITICAL</option>
                        </select>
                    </div>

                    <div className="grid grid-cols-2 gap-2">
                        <div className="grid gap-1">
                        <label className="text-xs text-muted">From</label>
                        <input type="datetime-local" className="bg-panel2 border border-white/10 rounded-md px-2 py-1" value={from} onChange={e=>setFrom(e.target.value)} />
                        </div>
                        <div className="grid gap-1">
                        <label className="text-xs text-muted">To</label>
                        <input type="datetime-local" className="bg-panel2 border border-white/10 rounded-md px-2 py-1" value={to} onChange={e=>setTo(e.target.value)} />
                        </div>
                    </div>
                    </div>

                    <div className="space-y-3">
                    <div className="text-sm text-muted">Actions</div>
                    <div className="flex gap-2">
                        <button onClick={purge} disabled={!isAdmin} className="px-3 py-1.5 rounded-md bg-red-600/80 hover:bg-red-600 text-white disabled:opacity-50 disabled:cursor-not-allowed">Purge (filters)</button>
                        <button onClick={clearAllOfType} disabled={!isAdmin} className="px-3 py-1.5 rounded-md bg-red-900/60 hover:bg-red-900 text-white disabled:opacity-50 disabled:cursor-not-allowed">Clear ALL of type</button>
                    </div>
                    <div className="text-xs text-muted">
                        Purge supprime les lignes qui correspondent aux filtres (type, level, période).
                        Clear supprime <b>tout</b> pour le type choisi.
                    </div>
                    </div>
                </div>
                </div>
            )}
            </div>
    );
}

---------- END OF FILE: hids-web/src/pages/Settings.jsx ----------


