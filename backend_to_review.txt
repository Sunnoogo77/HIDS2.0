---------- START OF FILE: hids-web/src/components/EngineCard.jsx ----------

export default function EngineCard({ title, counts = {}, onAction }) {
    const { total = 0, active = 0, paused = 0 } = counts;
    const status =
        active > 0 ? "running" : total === 0 ? "stopped" : paused === total ? "paused" : "stopped";

    const tone =
        status === "running" ? "success" : status === "paused" ? "warn" : "danger";
    const dot =
        tone === "success" ? "bg-success" : tone === "warn" ? "bg-warn" : "bg-danger";

    // Boutons conditionnels
    const actions =
        status === "running"
        ? [
            { key: "pause-all", label: "Pause" },
            { key: "stop-all", label: "Stop" },
            ]
        : status === "paused"
        ? [
            { key: "resume-all", label: "Resume" },
            { key: "stop-all", label: "Stop" },
            ]
        : /* stopped */
            [{ key: "resume-all", label: "Start" }];

    return (
        <div className="card p-4">
        {/* Titre plus mis en avant */}
        <div className="text-xs text-muted">{title}</div>

        <div className="mt-1 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
            {/* Etat */}
            <div>
            <div className="text-2xl font-semibold flex items-center gap-2 leading-none">
                <span className={`inline-block w-2 h-2 rounded-full ${dot}`} />
                {status.charAt(0).toUpperCase() + status.slice(1)}
            </div>
            <div className="text-xs text-muted mt-1">
                {active}/{total} active · {paused} paused
            </div>
            </div>

            {/* Actions (wrap sur petits écrans) */}
            <div className="flex flex-wrap gap-2">
            {actions.map((a) => (
                <button
                key={a.key}
                className="btn px-3 py-1.5 text-sm"
                onClick={() => onAction(a.key)}
                >
                {a.label}
                </button>
            ))}
            </div>
        </div>
        </div>
    );
}

---------- END OF FILE: hids-web/src/components/EngineCard.jsx ----------


---------- START OF FILE: hids-web/src/components/IconButton.jsx ----------

// src/components/IconButton.jsx
export default function IconButton({ title, onClick, children, className }) {
    return (
        <button
        type="button"
        title={title}
        onClick={onClick}
        className={
            "inline-flex items-center justify-center rounded-xl border border-white/10 bg-panel/50 hover:bg-panel2/80 transition px-2.5 py-1.5 text-sm " +
            (className || "")
        }
        >
        {children}
        </button>
    )
}

---------- END OF FILE: hids-web/src/components/IconButton.jsx ----------


---------- START OF FILE: hids-web/src/components/StatCard.jsx ----------

export default function StatCard({ title, value, hint, tone='accent' }){
    return (
        <div className="card p-5">
        <div className="text-sm text-muted">{title}</div>
        <div className="text-2xl font-semibold mt-1">{value}</div>
        {hint && <div className="text-xs text-muted mt-2">{hint}</div>}
        </div>
    )
}

---------- END OF FILE: hids-web/src/components/StatCard.jsx ----------


---------- START OF FILE: hids-web/src/context/AuthProvider.jsx ----------

// Fichier : hids-web/src/context/AuthProvider.jsx

import { createContext, useContext, useEffect, useMemo, useState } from 'react'
import { api } from '../lib/api'
import { jwtDecode } from 'jwt-decode'; // Assurez-vous d'installer ce paquet

const AuthCtx = createContext(null)
export const useAuth = () => useContext(AuthCtx)

export function AuthProvider({ children }) {
    const [token, setToken] = useState(() => localStorage.getItem('hids.token') || '')
    const [user, setUser] = useState(null); // Nouvel état pour les informations utilisateur
    const [loading, setLoading] = useState(false)
    const [error, setError] = useState('')

    // Effet pour décoder le token lorsque qu'il change
    useEffect(() => {
        if (token) {
            try {
                // Décoder le token et stocker les informations utilisateur (y compris is_admin)
                const decodedUser = jwtDecode(token);
                setUser(decodedUser);
            } catch (e) {
                console.error("Failed to decode token", e);
                setUser(null);
                setToken('');
                localStorage.removeItem('hids.token');
            }
        } else {
            setUser(null);
        }
    }, [token]);

    // // Quand un token existe, on demande le profil au backend
    // useEffect(() => {
    //     let cancelled = false;
    //     (async () => {
    //         if (!token) { setUser(null); return; }
    //         try {
    //         const me = await api.me(token);   // { id, username, email, is_admin, ... }
    //         if (!cancelled) setUser(me);
    //         } catch (e) {
    //         console.error("Failed to fetch /users/me", e);
    //         if (!cancelled) {
    //             setUser(null);
    //             setToken('');
    //             localStorage.removeItem('hids.token');
    //         }
    //         }
    //     })();
    //     return () => { cancelled = true; };
    //     }, [token]);

    const login = async (username, password) => {
        setLoading(true); setError('')
        try {
            const data = await api.login(username, password)
            setToken(data.access_token)
            localStorage.setItem('hids.token', data.access_token)
            return true
        } catch (e) {
            setError(e.message); return false
        } finally { setLoading(false) }
    }

    const logout = () => {
        setToken('')
        setUser(null); // Réinitialisez l'utilisateur
        localStorage.removeItem('hids.token')
    }

    // Le contexte expose maintenant les informations de l'utilisateur
    const value = useMemo(()=>({ token, user, login, logout, loading, error }), [token, user, loading, error])
    return <AuthCtx.Provider value={value}>{children}</AuthCtx.Provider>
}
---------- END OF FILE: hids-web/src/context/AuthProvider.jsx ----------


---------- START OF FILE: hids-web/src/pages/Dashboard.jsx ----------

import { useEffect, useMemo, useState } from "react";
import { useAuth } from "../context/AuthProvider";
import { api } from "../lib/api";
import EngineCard from "../components/EngineCard";
import StatCard from "../components/StatCard";
import {
    ResponsiveContainer, PieChart, Pie, Cell, Legend, Tooltip,
    LineChart, Line, XAxis, YAxis, Brush
} from "recharts";

// Fonction utilitaire pour "bucketer" les timestamps
function bucket(ts, stepMs) {
  return Math.floor(new Date(ts).getTime() / stepMs) * stepMs;
}

// Préréglages de la plage de temps
const PRESETS = [
    { key: "2h", label: "Last 2h", ms: 2 * 60 * 60 * 1000 },
    { key: "24h", label: "Last 24h", ms: 24 * 60 * 60 * 1000 },
    { key: "7d", label: "Last 7d", ms: 7 * 24 * 60 * 60 * 1000 },
    { key: "30d", label: "Last 30d", ms: 30 * 24 * 60 * 60 * 1000 },
    { key: "365d", label: "Last 1y", ms: 365 * 24 * 60 * 60 * 1000 },
];

// Préréglages d'intervalle pour le graphique en ligne
const INTERVALS = [
    { key: "auto", label: "Auto", ms: null },
    { key: "1m", label: "1 min", ms: 60 * 1000 },
    { key: "5m", label: "5 min", ms: 5 * 60 * 1000 },
    { key: "15m", label: "15 min", ms: 15 * 60 * 1000 },
    { key: "1h", label: "1 hour", ms: 60 * 60 * 1000 },
    { key: "1d", label: "1 day", ms: 24 * 60 * 60 * 1000 },
];

// Choix automatique du pas de temps
const pickAutoStep = (rangeMs) => rangeMs <= 6 * 60 * 60 * 1000 ? 60 * 1000
  : rangeMs <= 3 * 24 * 60 * 60 * 1000 ? 60 * 60 * 1000 : 24 * 60 * 60 * 1000;

// Formatage des étiquettes de temps
const fmtTick = (tsMs, rangeMs) => {
    const d = new Date(tsMs);
    if (rangeMs <= 24 * 60 * 60 * 1000) return d.toLocaleTimeString();
    if (rangeMs <= 30 * 24 * 60 * 60 * 1000)
        return d.toLocaleDateString() + " " + d.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
    return d.toLocaleDateString();
};

export default function Dashboard() {
    const { token } = useAuth();
    const [metrics, setMetrics] = useState(null);
    const [engine, setEngine] = useState(null);
    const [events, setEvents] = useState([]);
    const [error, setError] = useState(null);

    // Contrôles de plage pour le graphique temporel
    const [mode, setMode] = useState("preset");
    const [preset, setPreset] = useState("2h");
    const [customStart, setCustomStart] = useState(() => {
        const t = new Date(Date.now() - 2 * 60 * 60 * 1000);
        return new Date(t.getTime() - t.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
    });
    const [customEnd, setCustomEnd] = useState(() => {
        const t = new Date();
        return new Date(t.getTime() - t.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
    });
    const [interval, setInterval] = useState("auto");

    const reload = async () => {
        try {
        // Effacer l'erreur précédente
        setError(null);
        // Appels API pour les métriques, l'activité et les alertes
        const [m, activityData, alertsData] = await Promise.all([
            api.metrics(token),
            api.listHidsLog(token, { type: "activity", page: 1, limit: 50 }),
            api.listHidsLog(token, { type: "alerts", page: 1, limit: 50 }),
        ]);
        
        // Combinaison et tri des événements par date
        const combinedEvents = [
            ...(activityData?.lines || []),
            ...(alertsData?.lines || [])
        ].sort((a, b) => new Date(b.ts) - new Date(a.ts));

        // Obtenir l'état du moteur ou utiliser un état de secours
        let s = null;
        try { s = await api.fetchJson("/engine/state", { token }); }
        catch {
            const mm = m?.monitored ?? {};
            const f = mm.files ?? { total: 0, active: 0 };
            const d = mm.folders ?? { total: 0, active: 0 };
            const ip = mm.ips ?? { total: 0, active: 0 };
            s = {
            engine: "running",
            file: { total: f.total, active: f.active, paused: Math.max(0, f.total - f.active) },
            folder: { total: d.total, active: d.active, paused: Math.max(0, d.total - d.active) },
            ip: { total: ip.total, active: ip.active, paused: Math.max(0, ip.total - ip.active) },
            };
        }
        setMetrics(m);
        setEvents(combinedEvents);
        setEngine(s);
        } catch (error) {
        console.error("Failed to reload dashboard data:", error);
        setError("Erreur de chargement des données. Veuillez vérifier la connexion ou les logs du backend.");
        }
    };

    useEffect(() => { reload().catch(console.error); }, [token]);

    // Donut (proportions)
    const donutData = useMemo(() => {
        const mm = metrics?.monitored ?? { files: { total: 0 }, folders: { total: 0 }, ips: { total: 0 }, total: 0 };
        return [
        { name: "Files", value: mm.files?.total || 0 },
        { name: "Folders", value: mm.folders?.total || 0 },
        { name: "IPs", value: mm.ips?.total || 0 },
        ];
    }, [metrics]);
    const DONUT_COLORS = ["#60a5fa", "#a78bfa", "#34d399"];

    // Mini graphique temporel
    const eventsOverTime = useMemo(() => {
        let startMs, endMs;
        if (mode === "preset") {
        const p = PRESETS.find(p => p.key === preset) ?? PRESETS[0];
        endMs = Date.now(); startMs = endMs - p.ms;
        } else {
        const s = Date.parse(customStart); const e = Date.parse(customEnd);
        endMs = Number.isFinite(e) ? e : Date.now();
        startMs = Number.isFinite(s) ? s : endMs - 2 * 60 * 60 * 1000;
        if (startMs > endMs) [startMs, endMs] = [endMs - 60 * 60 * 1000, endMs];
        }
        const manual = INTERVALS.find(i => i.key === interval)?.ms ?? null;
        const STEP = manual || pickAutoStep(endMs - startMs);

        const table = new Map();
        for (const ev of events) {
        const t = +new Date(ev.ts || 0); if (!Number.isFinite(t) || t < startMs || t > endMs) continue;
        const b = bucket(t, STEP); table.set(b, (table.get(b) || 0) + 1);
        }
        const out = [];
        for (let t = bucket(startMs, STEP); t <= endMs; t += STEP) out.push({ ts: t, count: table.get(t) || 0 });
        return { points: out, startMs, endMs };
    }, [events, mode, preset, customStart, customEnd, interval]);

    const doAction = async (kind, action) => {
        await api.fetchJson(`/engine/${kind}/${action}`, { method: "POST", token });
        await reload();
    };

    if (error) {
        return (
        <div className="flex items-center justify-center h-full text-center text-red-500">
            <p>{error}</p>
        </div>
        );
    }

    if (!metrics) return <div>Loading…</div>;
    const m = metrics.monitored;

    return (
        <div className="space-y-6">
            {/* Ligne 1: cartes du moteur + compteurs */}
            <div className="grid gap-4 xl:grid-cols-4 md:grid-cols-2">
                <EngineCard title="File Monitoring" counts={engine?.file} onAction={(a) => doAction("file", a)} />
                <EngineCard title="Folder Monitoring" counts={engine?.folder} onAction={(a) => doAction("folder", a)} />
                <EngineCard title="IP Monitoring" counts={engine?.ip} onAction={(a) => doAction("ip", a)} />
                <StatCard title="Entities Monitored" value={m.total}
                    hint={`${m.files.total} files · ${m.folders.total} folders · ${m.ips.total} IPs`} />
            </div>

            {/* /* Ligne 2: graphique en anneau + activité récente */}
            <div className="grid gap-4 xl:grid-cols-2 md:grid-cols-2 ">
                {/* Le graphique en anneau occupe 60% de la largeur */}
                <div className="card p-4 flex-[60] h-[37vh] flex flex-col">
                    <div className="mb-2 text-sm text-muted">Entities by Type</div>
                    <div className="h-96">
                        <ResponsiveContainer width="100%" height="100%">
                            <PieChart>
                                <Pie data={donutData} dataKey="value" nameKey="name" innerRadius="50%" outerRadius="80%">
                                    {donutData.map((entry, idx) => <Cell key={idx} fill={DONUT_COLORS[idx % DONUT_COLORS.length]} />)}
                                </Pie>
                                <Tooltip />
                                <Legend />
                            </PieChart>
                        </ResponsiveContainer>
                    </div>
                </div>

                {/* L'activité récente occupe 40% de la largeur */}
                <div className="card p-4 flex-[40] h-[37vh] flex flex-col">
                    <div className="mb-2 text-sm text-muted">Recent activity</div>
                        <ul className="soft-scroll space-y-2 max-h-96 overflow-auto pr-2">
                            {events.slice(0, 25).map((e, i) => { // Afficher plus d'événements
                                const when = e?.ts ? new Date(e.ts).toLocaleString() : "—";
                                return (
                                    <li key={i} className="text-sm text-muted flex items-center gap-2">
                                        {e.level === "WARNING" && (
                                            <span className="badge bg-yellow-500/20 text-yellow-300">warning</span>
                                        )}
                                        {e.level === "INFO" && (
                                            <span className="badge bg-green-500/20 text-green-300">info</span>
                                        )}
                                        {e.level === "ERROR" && (
                                            <span className="badge bg-red-500 text-white">error</span>
                                        )}
                                        <span className="text-white truncate">{e.msg}</span>
                                        <span className="ml-auto flex-none">{when}</span>
                                    </li>
                                );
                            })}
                            {events.length === 0 && <div className="text-muted">No events yet</div>}
                        </ul>
                    </div>
                </div>

            {/* Ligne 3: petit graphique temporel (inchangé) */}
            <div className="card p-4">
                <div className="mb-3 flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
                    <div className="text-sm text-muted">Events Over Time</div>
                    <div className="flex flex-wrap gap-2 items-center">
                        <div className="flex rounded-md overflow-hidden border border-white/10">
                            <button
                                onClick={() => setMode("preset")}
                                className={`px-3 py-1.5 text-sm ${mode === "preset" ? "bg-panel2" : "bg-panel/50"}`}
                                title="Use quick presets"
                            >
                                Presets
                            </button>
                            <button
                                onClick={() => setMode("custom")}
                                className={`px-3 py-1.5 text-sm ${mode === "custom" ? "bg-panel2" : "bg-panel/50"}`}
                                title="Pick an absolute date range"
                            >
                                Custom
                            </button>
                        </div>
                        {mode === "preset" ? (
                            <select
                                value={preset}
                                onChange={e => setPreset(e.target.value)}
                                className="bg-panel2 border border-white/10 rounded-md text-sm px-2 py-1 focus:outline-none"
                                title="Time range"
                            >
                                {PRESETS.map(r => <option key={r.key} value={r.key}>{r.label}</option>)}
                            </select>
                        ) : (
                            <div className="flex flex-wrap items-center gap-2">
                                <label className="text-xs text-muted">From</label>
                                <input
                                    type="datetime-local"
                                    value={customStart}
                                    onChange={e => setCustomStart(e.target.value)}
                                    className="bg-panel2 border border-white/10 rounded-md text-sm px-2 py-1"
                                />
                                <label className="text-xs text-muted">to</label>
                                <input
                                    type="datetime-local"
                                    value={customEnd}
                                    onChange={e => setCustomEnd(e.target.value)}
                                    className="bg-panel2 border border-white/10 rounded-md text-sm px-2 py-1"
                                />
                            </div>
                        )}
                        <select
                            value={interval}
                            onChange={e => setInterval(e.target.value)}
                            className="bg-panel2 border border-white/10 rounded-md text-sm px-2 py-1 focus:outline-none"
                            title="Aggregation"
                        >
                            {INTERVALS.map(i => <option key={i.key} value={i.key}>{i.label}</option>)}
                        </select>
                    </div>
                </div>
                <div className="h-56">
                    <ResponsiveContainer width="100%" height="100%">
                        <LineChart data={eventsOverTime.points}>
                        <XAxis
                            dataKey="ts"
                            type="number"
                            domain={["dataMin", "dataMax"]}
                            tickFormatter={(v) => fmtTick(v, eventsOverTime.endMs - eventsOverTime.startMs)}
                        />
                        <YAxis allowDecimals={false} />
                        <Tooltip
                            labelFormatter={(v) => new Date(v).toLocaleString()}
                            formatter={(val) => [val, "alerts"]}
                        />
                        <Line type="monotone" dataKey="count" dot={false} />
                        <Brush
                            dataKey="ts"
                            height={22}
                            travellerWidth={12}
                            tickFormatter={(v) => fmtTick(v, eventsOverTime.endMs - eventsOverTime.startMs)}
                        />
                        </LineChart>
                    </ResponsiveContainer>
                </div>
            </div>
        </div>
    );
}

---------- END OF FILE: hids-web/src/pages/Dashboard.jsx ----------


---------- START OF FILE: hids-web/src/pages/Login.jsx ----------

import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../context/AuthProvider'

export default function Login(){
    const { login, error, loading } = useAuth()
    const [username, setU] = useState('admin_Hids')
    const [password, setP] = useState('st21@g-p@ss!')
    const nav = useNavigate()

    const submit = async (e) => {
        e.preventDefault()
        // Wait for the login promise to resolve
        const success = await login(username, password);
        if (success) {
            // Redirect only on successful login
            nav('/dashboard');
        }
    }

    return (
        <div className="h-screen grid place-items-center p-6">
            <form onSubmit={submit} className="card p-8 w-full max-w-md space-y-4">
                <div className="text-xl font-semibold">Sign in</div>
                <input className="input w-full" placeholder="Username" value={username} onChange={e=>setU(e.target.value)} />
                <input className="input w-full" type="password" placeholder="Password" value={password} onChange={e=>setP(e.target.value)} />
                {error && <div className="text-danger text-sm">{String(error)}</div>}
                <button className="btn w-full justify-center">{loading?'…':'Login'}</button>
            </form>
        </div>
    )
}

---------- END OF FILE: hids-web/src/pages/Login.jsx ----------


---------- START OF FILE: hids-web/src/pages/Settings.jsx ----------

// Fichier : src/pages/Settings.jsx

import { useEffect, useMemo, useState } from "react";
import { useAuth } from "../context/AuthProvider";
import { api } from "../lib/api";
import { Pencil, Trash2, Check, X, Play, Pause } from "lucide-react";

/* ---------- UI helpers ---------- */
const Badge = ({ children, tone = "muted" }) => {
    const map = {
        ok: "bg-emerald-500/20 text-emerald-300",
        warn: "bg-amber-500/20 text-amber-300",
        danger: "bg-red-500/20 text-red-300",
        muted: "bg-white/5 text-muted",
        info: "bg-sky-500/20 text-sky-300",
        role: "bg-purple-500/20 text-purple-300",
    };
    return (
        <span className={`px-2 py-0.5 rounded-full text-xs border border-white/10 ${map[tone]}`}>
        {children}
        </span>
    );
};

const IconButton = ({ title, onClick, children, disabled=false }) => (
    <button
        className="p-2 rounded-md border border-white/10 bg-panel2 hover:bg-panel transition disabled:opacity-50 disabled:cursor-not-allowed"
        title={title}
        aria-label={title}
        onClick={onClick}
        disabled={disabled}
    >
        {children}
    </button>
);

/* ---------- Modal: Add / Edit password ---------- */
function UserModal({ open, mode, user, onClose, onSave, disabled }) {
    const [username, setUsername] = useState(user?.username || "");
    const [email, setEmail] = useState(user?.email || "");
    const [isAdmin, setIsAdmin] = useState(!!user?.is_admin);
    const [password, setPassword] = useState("");
    const [confirm, setConfirm] = useState("");

    useEffect(() => {
        if (open) {
        setUsername(user?.username || "");
        setEmail(user?.email || "");
        setIsAdmin(!!user?.is_admin);
        setPassword("");
        setConfirm("");
        }
    }, [open, user]);

    if (!open) return null;

    const canSave =
        !disabled &&
        ((mode === "add" && username && email && password && password === confirm) ||
        (mode === "edit" && password && password === confirm));

    const submit = () => {
        if (!canSave) return;
        if (mode === "add") onSave({ username, email, password, is_admin: isAdmin });
        else onSave({ password });
    };

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
        <div className="absolute inset-0 bg-black/60" onClick={onClose} />
        <div className="relative z-10 w-[460px] rounded-xl bg-panel p-4 border border-white/10 shadow-lg">
            <div className="text-lg font-medium mb-4">
            {mode === "add" ? "Add user" : `Change password — ${user?.username}`}
            </div>

            {disabled && (
            <div className="mb-3 px-3 py-2 rounded-md bg-red-500/20 text-red-300">
                Admin required to perform this action.
            </div>
            )}

            <div className="grid gap-3">
            {mode === "add" && (
                <>
                <div className="grid gap-1.5">
                    <label className="text-xs text-muted">Username</label>
                    <input
                    className="bg-panel2 border border-white/10 rounded-md px-3 py-2 disabled:opacity-50"
                    value={username}
                    onChange={e=>setUsername(e.target.value)}
                    placeholder="jdoe"
                    disabled={disabled}
                    />
                </div>
                <div className="grid gap-1.5">
                    <label className="text-xs text-muted">Email</label>
                    <input
                    type="email"
                    className="bg-panel2 border border-white/10 rounded-md px-3 py-2 disabled:opacity-50"
                    value={email}
                    onChange={e=>setEmail(e.target.value)}
                    placeholder="jdoe@example.com"
                    disabled={disabled}
                    />
                </div>
                </>
            )}

            <div className="grid gap-1.5">
                <label className="text-xs text-muted">New password</label>
                <input
                type="password"
                className="bg-panel2 border border-white/10 rounded-md px-3 py-2 disabled:opacity-50"
                value={password}
                onChange={e=>setPassword(e.target.value)}
                placeholder="********"
                disabled={disabled}
                />
            </div>
            <div className="grid gap-1.5">
                <label className="text-xs text-muted">Confirm password</label>
                <div className="relative">
                <input
                    type="password"
                    className={`w-full bg-panel2 border rounded-md px-3 py-2 disabled:opacity-50 ${
                    password && confirm && password!==confirm ? "border-red-500" : "border-white/10"
                    }`}
                    value={confirm}
                    onChange={e=>setConfirm(e.target.value)}
                    placeholder="********"
                    disabled={disabled}
                />
                {password && confirm && password===confirm && (
                    <span className="absolute right-3 top-1/2 -translate-y-1/2 text-emerald-400"><Check size={16}/></span>
                )}
                {password && confirm && password!==confirm && (
                    <span className="absolute right-3 top-1/2 -translate-y-1/2 text-red-400"><X size={16}/></span>
                )}
                </div>
            </div>

            {mode === "add" && (
                <label className="inline-flex items-center gap-2 mt-1 select-none">
                <input type="checkbox" checked={isAdmin} onChange={e=>setIsAdmin(e.target.checked)} disabled={disabled}/>
                <span>Administrator</span>
                </label>
            )}
            </div>

            <div className="mt-4 flex justify-end gap-2">
            <button className="px-3 py-1.5 rounded-md bg-panel/50 border border-white/10" onClick={onClose}>Cancel</button>
            <button className="px-3 py-1.5 rounded-md bg-green-600 hover:bg-green-700 text-white disabled:opacity-50" disabled={!canSave} onClick={submit}>
                Save
            </button>
            </div>
        </div>
        </div>
    );
    }

/* ---------- Main page ---------- */
export default function Settings() {
    const { token, user } = useAuth();
    const isAdmin = !!user?.is_admin;

    const [tab, setTab] = useState("users"); // users | machines | logs

    /* Users */
    const [users, setUsers] = useState([]);
    const [uLoading, setULoading] = useState(false);
    const [uMsg, setUMsg] = useState(null); // on ne l'utilise plus pour "loaded", seulement pour erreurs
    const [modal, setModal] = useState({ open:false, mode:"add", user:null });

    // NEW: search, role filter, pagination
    const [query, setQuery] = useState("");
    const [roleFilter, setRoleFilter] = useState("all"); // all | admin | standard
    const [page, setPage] = useState(1);
    const pageSize = 7;

    const loadUsers = async () => {
        setULoading(true);
        setUMsg(null);
        try {
        const rows = await api.listUsers(token);
        setUsers(rows || []);
        } catch (e) {
        setUMsg({ type:"error", text: e?.body?.detail || "Failed to load users" });
        } finally {
        setULoading(false);
        }
    };

    useEffect(() => {
        if (tab === "users" && isAdmin) {
        loadUsers();
        } else if (tab === "users" && !isAdmin) {
        setUsers([]);
        setUMsg({ type: "warning", text: "Admin privileges are required to view users." });
        }
    }, [tab, isAdmin]); // eslint-disable-line

    // reset pagination quand on change les filtres
    useEffect(() => { setPage(1); }, [query, roleFilter]);

    // Filtres + pagination (client-side)
    const filtered = useMemo(() => {
        const q = query.trim().toLowerCase();
        return (users || []).filter(u => {
        const matchesRole =
            roleFilter === "all" ? true :
            roleFilter === "admin" ? !!u.is_admin :
            !u.is_admin;

        const matchesQuery = !q || [u.username, u.email]
            .some(x => (x || "").toLowerCase().includes(q));

        return matchesRole && matchesQuery;
        });
    }, [users, query, roleFilter]);

    const pageCount = Math.max(1, Math.ceil(filtered.length / pageSize));
    const currentPage = Math.min(page, pageCount);
    const start = (currentPage - 1) * pageSize;
    const visibleUsers = filtered.slice(start, start + pageSize);

    const doAdd = () => setModal({ open:true, mode:"add", user:null });
    const doEdit = (user) => setModal({ open:true, mode:"edit", user });
    const doDelete = async (u) => {
        try { await api.deleteUser(token, u.id); loadUsers(); }
        catch (e) { setUMsg({ type:"error", text: e?.body?.detail || "Delete failed" }); }
    };
    const saveUser = async (payload) => {
        try {
        if (modal.mode === "add") { await api.createUser(token, payload); }
        else { await api.updateUserPassword(token, modal.user.id, payload); }
        setModal({ open:false, mode:"add", user:null });
        loadUsers();
        } catch (e) { setUMsg({ type:"error", text: e?.body?.detail || "Save failed" }); }
    };

    /* Machines */
    const [mState, setMState] = useState("stopped"); // running|stopped|loading
    const [metrics, setMetrics] = useState(null);
    const refreshMachines = async () => {
        try {
        const [state, m] = await Promise.all([api.engineState(token), api.metrics(token)]);
        setMetrics(m?.monitored || null);
        const anyActive =
            (state?.file?.active||0) + (state?.folder?.active||0) + (state?.ip?.active||0) > 0;
        setMState(anyActive ? "running" : "stopped");
        } catch { /* ignore */ }
    };
    useEffect(() => { if (tab==="machines") refreshMachines(); }, [tab]); // eslint-disable-line

    const startAll = async () => {
        setMState("loading");
        try { await api.startAll(token); await refreshMachines(); }
        catch { setMState("stopped"); }
    };
    // const stopAll = async () => {
    //     setMState("loading");
    //     try { await api.stopAll(token); await refreshMachines(); }
    //     catch { setMState("running"); }
    // };
    const stopAll = async () => {
  console.log("CLICK stopAll, token=", token);  // <---
    setMState("loading");
    try {
        console.log("API CALL stopAll...");
        await api.stopAll(token);
        console.log("API CALL OK");
        await refreshMachines();
    } catch (e) {
        console.error("Erreur stopAll:", e);
        setMState("running");
    }
};


    /* Logs purge (inchangé pour l’instant) */
    const [logType, setLogType] = useState("activity");
    const [level, setLevel] = useState("");
    const [from, setFrom] = useState("");
    const [to, setTo] = useState("");
    const [lMsg, setLMsg] = useState(null);
    const purge = async () => {
        setLMsg(null);
        try { await api.purgeHidsLog(token, { type: logType, level: level || undefined, from: from || undefined, to: to || undefined }); setLMsg({ type:"success", text:"Logs purged" }); }
        catch (e) { setLMsg({ type:"error", text: e?.body?.detail || "Purge failed" }); }
    };
    const clearAllOfType = async () => {
        setLMsg(null);
        try { await api.clearHidsLog(token, logType); setLMsg({ type:"success", text:"Logs cleared" }); }
        catch (e) { setLMsg({ type:"error", text: e?.body?.detail || "Clear failed" }); }
    };

    return (
        <div className="space-y-6">
            {/* Admin banner */}
            {user && !isAdmin && (
                <div className="px-4 py-2 rounded-md bg-amber-500/20 text-amber-300">
                You are logged in as a non-admin user. All Settings actions are disabled.
                </div>
            )}

            <div className="flex items-center justify-between">
                <div className="flex gap-2">
                {["users","machines","logs"].map(t => (
                    <button key={t}
                    onClick={()=>setTab(t)}
                    className={`px-3 py-1.5 rounded-md border capitalize ${tab===t ? "bg-panel2 border-white/10" : "bg-panel/50 border-white/5"}`}>
                    {t}
                    </button>
                ))}
                </div>
            </div>

            {/* USERS TAB */}
            {tab==="users" && (
                <div className="space-y-6"> 
                    {/* Erreurs uniquement (plus de bannière "X users loaded") */}
                    {uMsg?.type==="error" && (
                        <div className="mb-1 px-3 py-2 rounded-md bg-red-500/20 text-red-300">
                        {uMsg.text}
                        </div>
                    )}

                    {/* Barre filtres/recherche */}
                    <div className="flex flex-wrap gap-2 items-center justify-between card p-3">
                        <div className="flex gap-2 items-center">
                        <select
                            value={roleFilter}
                            onChange={e=>setRoleFilter(e.target.value)}
                            className="bg-panel2 border border-white/10 rounded-md px-2 py-1"
                        >
                            <option value="all">All users</option>
                            <option value="admin">Admins</option>
                            <option value="standard">Standard</option>
                        </select>

                        <input
                            value={query}
                            onChange={e=>setQuery(e.target.value)}
                            placeholder="Search username or email…"
                            className="bg-panel2 border border-white/10 rounded-md px-3 py-1.5 w-64"
                        />
                        </div>

                        <button
                        onClick={doAdd}
                        className="px-3 py-1.5 rounded-md border border-white/10 bg-panel2 hover:bg-panel disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled={!isAdmin}
                        title={!isAdmin ? "Admin required" : "Add user"}
                        >
                        + Add user
                        </button>
                    </div>

                    {/* Table */}
                    <div className="card rounded-xl overflow-hidden">
                        <table className="w-full text-sm">
                            <thead className="bg-white/5 text-muted">
                                <tr>
                                <th className="text-left px-4 py-3">Username</th>
                                <th className="text-left px-4 py-3">Email</th>
                                <th className="text-left px-4 py-3">Role</th>
                                <th className="text-right px-4 py-3">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {uLoading && (
                                <tr><td colSpan="4" className="px-4 py-6 text-center text-muted">Loading users…</td></tr>
                                )}
                                {!uLoading && visibleUsers.length === 0 && (
                                <tr><td colSpan="4" className="px-4 py-6 text-center text-muted">No users to display.</td></tr>
                                )}
                                {visibleUsers.map(u => (
                                <tr key={u.id} className="border-t border-white/5">
                                    <td className="px-4 py-2">{u.username}</td>
                                    <td className="px-4 py-2">{u.email || "—"}</td>
                                    <td className="px-4 py-2">
                                    <Badge tone={u.is_admin ? "role" : "muted"}>{u.is_admin ? "Admin" : "Standard"}</Badge>
                                    </td>
                                    <td className="px-4 py-2">
                                    <div className="flex justify-end gap-2">
                                        <IconButton title={!isAdmin ? "Admin required" : "Change password"} onClick={()=>doEdit(u)} disabled={!isAdmin}><Pencil size={16}/></IconButton>
                                        <IconButton title={!isAdmin ? "Admin required" : "Delete user"} onClick={()=>doDelete(u)} disabled={!isAdmin}><Trash2 size={16}/></IconButton>
                                    </div>
                                    </td>
                                </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>

                    {/* Pagination */}
                    <div className="flex items-center justify-between">
                        <div className="text-xs text-muted">
                        Page {currentPage} / {pageCount} — {filtered.length} user{filtered.length!==1 ? "s" : ""}
                        </div>
                        <div className="flex gap-2">
                        <button
                            className="px-3 py-1.5 rounded-md border border-white/10 bg-panel2 disabled:opacity-50"
                            onClick={()=>setPage(p=>Math.max(1, p-1))}
                            disabled={currentPage<=1}
                            title="Previous page"
                            aria-label="Previous page"
                        >
                            Prev
                        </button>
                        <button
                            className="px-3 py-1.5 rounded-md border border-white/10 bg-panel2 disabled:opacity-50"
                            onClick={()=>setPage(p=>Math.min(pageCount, p+1))}
                            disabled={currentPage>=pageCount}
                            title="Next page"
                            aria-label="Next page"
                        >
                            Next
                        </button>
                        </div>
                    </div>

                    <UserModal
                        open={modal.open}
                        mode={modal.mode}
                        user={modal.user}
                        onClose={()=>setModal({ open:false, mode:"add", user:null })}
                        onSave={saveUser}
                        disabled={!isAdmin}
                    />
                </div>
            )}

            {/* MACHINES TAB */}
            {tab==="machines" && (
                <div className="grid gap-6 md:grid-cols-2">
                    <div className="card p-4 flex flex-col items-center justify-center">
                        <h3 className="text-lg font-medium mb-4">Global control</h3>
                        <div className={`relative w-44 h-44 mb-3 ${!isAdmin ? "opacity-60" : ""}`}>
                            {mState==="running" && <div className="absolute inset-0 rounded-full bg-emerald-500/10 animate-ping" />}
                            <div className="w-full h-full rounded-full bg-panel2 border-2 border-white/10 flex items-center justify-center">
                                {mState==="stopped" && (
                                <button
                                    onClick={startAll}
                                    disabled={!isAdmin}
                                    className="w-24 h-24 rounded-full bg-emerald-600/20 hover:bg-emerald-600/30 border border-white/10 flex items-center justify-center disabled:cursor-not-allowed"
                                    title="Start all engines"
                                    aria-label="Start all engines"
                                >
                                    <Play size={48} className="text-emerald-400"/>
                                
                                </button>
                                )}
                                {mState==="running" && (
                                <button
                                    onClick={stopAll}
                                    disabled={!isAdmin}
                                    className="w-24 h-24 rounded-full bg-red-600/20 hover:bg-red-600/30 border border-white/10 flex items-center justify-center disabled:cursor-not-allowed"
                                    title="Stop all engines"
                                    aria-label="Stop all engines"
                                >
                                    <Pause size={48} className="text-red-400"/>
                                </button>
                                )}
                                {mState==="loading" && (
                                <svg className="animate-spin text-white" viewBox="0 0 24 24" width="48" height="48" role="img" aria-label="Loading">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"/>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
                                </svg>
                                )}
                            </div>
                        </div>
                        <div className="text-muted text-sm">
                            {mState==="stopped" && "All engines stopped"}
                            {mState==="running" && "Engines running"}
                            {mState==="loading" && "Updating..."}
                        </div>
                        {!isAdmin && <div className="mt-2 text-xs text-muted">Admin required to start/stop.</div>}
                    </div>

                    <div className="card p-4">
                        <h3 className="text-lg font-medium mb-4">Monitored entities</h3>
                        <div className="grid grid-cols-3 gap-3">
                            <div className="rounded-xl p-3 bg-white/5">
                                <div className="text-muted text-xs mb-1">Files</div>
                                <div className="text-2xl font-semibold">{metrics?.files?.total ?? "—"}</div>
                            </div>
                            <div className="rounded-xl p-3 bg-white/5">
                                <div className="text-muted text-xs mb-1">Folders</div>
                                <div className="text-2xl font-semibold">{metrics?.folders?.total ?? "—"}</div>
                            </div>
                            <div className="rounded-xl p-3 bg-white/5">
                                <div className="text-muted text-xs mb-1">IPs</div>
                                <div className="text-2xl font-semibold">{metrics?.ips?.total ?? "—"}</div>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* LOGS TAB */}
            {tab==="logs" && (
                <div className="card p-4 space-y-4">
                {lMsg && (
                    <div className={`px-3 py-2 rounded-md ${lMsg.type==="success" ? "bg-emerald-500/20 text-emerald-300" : "bg-red-500/20 text-red-300"}`}>{lMsg.text}</div>
                )}
                {!isAdmin && (
                    <div className="px-3 py-2 rounded-md bg-amber-500/20 text-amber-300">
                    Viewing only — admin required to purge or clear logs.
                    </div>
                )}
                <div className="grid md:grid-cols-2 gap-4">
                    <div className="space-y-3">
                    <div className="text-sm text-muted">Target</div>
                    <div className="flex flex-wrap gap-2">
                        <select value={logType} onChange={e=>setLogType(e.target.value)} className="bg-panel2 border border-white/10 rounded-md px-2 py-1">
                        <option value="activity">Activity logs</option>
                        <option value="alerts">Alerts logs</option>
                        </select>
                        <select value={level} onChange={e=>setLevel(e.target.value)} className="bg-panel2 border border-white/10 rounded-md px-2 py-1">
                        <option value="">Level: any</option>
                        <option>INFO</option>
                        <option>WARNING</option>
                        <option>ERROR</option>
                        <option>CRITICAL</option>
                        </select>
                    </div>

                    <div className="grid grid-cols-2 gap-2">
                        <div className="grid gap-1">
                        <label className="text-xs text-muted">From</label>
                        <input type="datetime-local" className="bg-panel2 border border-white/10 rounded-md px-2 py-1" value={from} onChange={e=>setFrom(e.target.value)} />
                        </div>
                        <div className="grid gap-1">
                        <label className="text-xs text-muted">To</label>
                        <input type="datetime-local" className="bg-panel2 border border-white/10 rounded-md px-2 py-1" value={to} onChange={e=>setTo(e.target.value)} />
                        </div>
                    </div>
                    </div>

                    <div className="space-y-3">
                    <div className="text-sm text-muted">Actions</div>
                    <div className="flex gap-2">
                        <button onClick={purge} disabled={!isAdmin} className="px-3 py-1.5 rounded-md bg-red-600/80 hover:bg-red-600 text-white disabled:opacity-50 disabled:cursor-not-allowed">Purge (filters)</button>
                        <button onClick={clearAllOfType} disabled={!isAdmin} className="px-3 py-1.5 rounded-md bg-red-900/60 hover:bg-red-900 text-white disabled:opacity-50 disabled:cursor-not-allowed">Clear ALL of type</button>
                    </div>
                    <div className="text-xs text-muted">
                        Purge supprime les lignes qui correspondent aux filtres (type, level, période).
                        Clear supprime <b>tout</b> pour le type choisi.
                    </div>
                    </div>
                </div>
                </div>
            )}
            </div>
    );
}

---------- END OF FILE: hids-web/src/pages/Settings.jsx ----------


---------- START OF FILE: hids-web/src/pages/Surveillance.jsx ----------

// src/pages/Surveillance.jsx
import { useEffect, useState } from "react";
import { useAuth } from "../context/AuthProvider";
import { api } from "../lib/api";
import IconButton from "../components/IconButton";
import { Pencil, ScanLine, Trash2, Upload } from "lucide-react";

const FREQS = ["minutely", "hourly", "daily"];

/* --------------------------------------------------------------
   Utils
-------------------------------------------------------------- */
function stripAndNormalizePath(raw) {
  if (!raw) return "";
  let s = String(raw).trim();
  // supprime les guillemets si “Copy as path” (Windows/macOS) les ajoute
  if ((s.startsWith('"') && s.endsWith('"')) || (s.startsWith("'") && s.endsWith("'"))) {
    s = s.slice(1, -1);
  }
  // normalise / et \
  s = s.replace(/\\\\+/g, "\\").replace(/\/{2,}/g, "/");
  return s;
}

/* --------------------------------------------------------------
   Modal: Edit frequency (affichage uniquement + édition via crayon)
-------------------------------------------------------------- */
function EditFrequencyModal({ open, onClose, item, onSave }) {
  const [freq, setFreq] = useState(item?.frequency || "hourly");
  useEffect(() => setFreq(item?.frequency || "hourly"), [item]);
  if (!open) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      <div className="absolute inset-0 bg-black/60" onClick={onClose} />
      <div className="relative z-10 w-[420px] rounded-xl bg-panel p-4 border border-white/10 shadow-lg">
        <div className="text-lg font-medium mb-3">Edit frequency</div>

        <div className="space-y-2">
          <div className="text-sm text-muted">
            {item?.path || item?.ip || item?.hostname || "entity"}
          </div>
          <label className="text-xs text-muted">Frequency</label>
          <select
            value={freq}
            onChange={(e) => setFreq(e.target.value)}
            className="w-full bg-panel2 border border-white/10 rounded-md text-sm px-2 py-2 focus:outline-none"
          >
            {FREQS.map((f) => (
              <option key={f} value={f}>
                {f}
              </option>
            ))}
          </select>
        </div>

        <div className="mt-4 flex justify-end gap-2">
          <button
            className="px-3 py-1 rounded-md bg-panel/50 border border-white/10 hover:bg-panel transition"
            onClick={onClose}
          >
            Cancel
          </button>
          <button
            className="px-3 py-1 rounded-md bg-green-600 hover:bg-green-500 text-white transition"
            onClick={() => onSave(freq)}
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
}

/* --------------------------------------------------------------
    Modal: Add file/folder (helper local + instruction copier/coller)
-------------------------------------------------------------- */
function AddPathModal({ open, onClose, kind, onSave }) {
  const [path, setPath] = useState("");
  const [frequency, setFrequency] = useState("hourly");
  const [helperHint, setHelperHint] = useState(""); // juste pour afficher le nom/indice

  useEffect(() => {
    if (open) {
      setPath("");
      setFrequency("hourly");
      setHelperHint("");
    }
  }, [open]);

  if (!open) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      <div className="absolute inset-0 bg-black/60" onClick={onClose} />
      <div className="relative z-10 w-[520px] rounded-xl bg-panel p-4 border border-white/10 shadow-lg">
        <div className="text-lg font-medium mb-4">
          {kind === "files" ? "Add File" : "Add Folder"}
        </div>

        <div className="grid gap-3">
          {/* PATH */}
          <div className="grid gap-2">
            <label className="text-xs text-muted">Absolute path (server)</label>
            <input
              value={path}
              onChange={(e) => setPath(stripAndNormalizePath(e.target.value))}
              placeholder={kind === "files" ? "/etc/hosts" : "/var/log"}
              className="bg-panel2 border border-white/10 rounded-md px-3 py-2"
            />

            <div className="flex items-center gap-2">
              {/* Helper: ouvre le sélecteur local pour récupérer un indice (nom) */}
              <button
                type="button"
                className="px-2 py-1 rounded-md border border-white/10 bg-panel2 flex items-center gap-2"
                onClick={() => {
                  const inp = document.createElement("input");
                  inp.type = "file";
                  if (kind === "folders") inp.webkitdirectory = true;
                  inp.onchange = (ev) => {
                    const f = ev.target.files?.[0];
                    if (!f) return;
                    const hint =
                      kind === "folders"
                        ? (f.webkitRelativePath?.split("/")[0] || "")
                        : (f.name || "");
                    setHelperHint(hint);
                  };
                  inp.click();
                }}
                title={kind === "files" ? "Choose file (helper)" : "Choose folder (helper)"}
              >
                <Upload size={16} />
                {kind === "files" ? "Choose file" : "Choose folder"}
              </button>

              <span className="text-xs text-muted">
                Le navigateur ne peut pas lire les chemins absolus. <b>Faites un clic droit</b> sur
                le fichier/dossier dans votre OS → <b>Copier le chemin complet</b> puis collez‑le ci‑dessus.
              </span>
            </div>

            {helperHint && (
              <div className="text-xs text-muted">
                Helper picked: <span className="text-white/80">{helperHint}</span> (nom seulement)
              </div>
            )}

            <div className="text-[11px] leading-relaxed text-muted mt-1">
              Tips:
              <ul className="list-disc pl-4">
                <li>Windows: Shift + clic droit → “Copy as path”.</li>
                <li>macOS: clic droit → maintenir <b>Option</b> → “Copy “…” as Pathname”.</li>
                <li>Linux: la plupart des explorateurs ont “Copy location”.</li>
                <li>Les guillemets autour du chemin seront retirés automatiquement.</li>
              </ul>
            </div>
          </div>

          {/* FREQUENCY */}
          <div className="grid gap-2">
            <label className="text-xs text-muted">Frequency</label>
            <select
              value={frequency}
              onChange={(e) => setFrequency(e.target.value)}
              className="bg-panel2 border border-white/10 rounded-md text-sm px-2 py-2"
            >
              {FREQS.map((f) => (
                <option key={f} value={f}>
                  {f}
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className="mt-4 flex justify-end gap-2">
          <button className="px-3 py-1.5 rounded-md bg-panel/50 border border-white/10" onClick={onClose}>
            Cancel
          </button>
          <button
            className="px-3 py-1.5 rounded-md bg-green-600 hover:bg-green-500 text-white transition disabled:opacity-50"
            onClick={() => onSave({ path: stripAndNormalizePath(path), frequency })}
            disabled={!stripAndNormalizePath(path)}
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
}

/* --------------------------------------------------------------
    Modal: Add IP
-------------------------------------------------------------- */
function AddIpModal({ open, onClose, onSave }) {
  const [ip, setIp] = useState("");
  const [hostname, setHostname] = useState("");
  const [frequency, setFrequency] = useState("hourly");

  useEffect(() => {
    if (open) {
      setIp("");
      setHostname("");
      setFrequency("hourly");
    }
  }, [open]);

  if (!open) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      <div className="absolute inset-0 bg-black/60" onClick={onClose} />
      <div className="relative z-10 w-[460px] rounded-xl bg-panel p-4 border border-white/10 shadow-lg">
        <div className="text-lg font-medium mb-4">Add IP</div>

        <div className="grid gap-3">
          <div className="grid gap-2">
            <label className="text-xs text-muted">IP address</label>
            <input
              value={ip}
              onChange={(e) => setIp(e.target.value)}
              placeholder="10.0.0.1"
              className="bg-panel2 border border-white/10 rounded-md px-3 py-2"
            />
          </div>
          <div className="grid gap-2">
            <label className="text-xs text-muted">Hostname (optional)</label>
            <input
              value={hostname}
              onChange={(e) => setHostname(e.target.value)}
              placeholder="lab"
              className="bg-panel2 border border-white/10 rounded-md px-3 py-2"
            />
          </div>
          <div className="grid gap-2">
            <label className="text-xs text-muted">Frequency</label>
            <select
              value={frequency}
              onChange={(e) => setFrequency(e.target.value)}
              className="bg-panel2 border border-white/10 rounded-md text-sm px-2 py-2"
            >
              {FREQS.map((f) => (
                <option key={f} value={f}>
                  {f}
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className="mt-4 flex justify-end gap-2">
          <button
            className="px-3 py-1 rounded-md bg-panel/50 border border-white/10"
            onClick={onClose}
          >
            Cancel
          </button>
          <button
            className="px-3 py-1 rounded-md bg-green-600 hover:bg-green-700 text-white transition disabled:opacity-50"
            onClick={() => onSave({ ip, hostname, frequency })}
            disabled={!ip}
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
}

/* --------------------------------------------------------------
    Page
-------------------------------------------------------------- */
export default function Surveillance() {
  const { token } = useAuth();
  const [tab, setTab] = useState("files"); // 'files' | 'folders' | 'ips'
  const [rows, setRows] = useState([]);
  const [loading, setLoading] = useState(false);

  // Modals
  const [editing, setEditing] = useState(null); // { entity, item }
  const [openAddFile, setOpenAddFile] = useState(false);
  const [openAddFolder, setOpenAddFolder] = useState(false);
  const [openAddIp, setOpenAddIp] = useState(false);

  // API maps
  const loaders = {
    files: () => api.listFiles(token),
    folders: () => api.listFolders(token),
    ips: () => api.listIps(token),
  };
  const deleters = {
    files: (id) => api.deleteFile(token, id),
    folders: (id) => api.deleteFolder(token, id),
    ips: (id) => api.deleteIp(token, id),
  };
  const scanners = {
    files: (id) => api.scanNowFile(token, id),
    folders: (id) => api.scanNowFolder(token, id),
    ips: (id) => api.scanNowIp(token, id),
  };
  const updaters = {
    files: (id, body) => api.updateFile(token, id, body),
    folders: (id, body) => api.updateFolder(token, id, body),
    ips: (id, body) => api.updateIp(token, id, body),
  };
  const creators = {
    files: (data) => api.createFile(token, data),
    folders: (data) => api.createFolder(token, data),
    ips: (data) => api.createIp(token, data),
  };

  const reload = async () => {
    setLoading(true);
    try {
      const data = await loaders[tab]();
      setRows(Array.isArray(data) ? data : data?.items || []);
    } catch (e) {
      console.error("load failed", e);
      setRows([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    reload().catch(console.error);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [tab, token]);

  const onScan = async (id) => {
    await scanners[tab](id).catch(console.error);
  };

  const onDelete = async (id) => {
    if (!confirm("Delete item?")) return;
    await deleters[tab](id).catch(console.error);
    await reload();
  };

  const openEdit = (item) => setEditing({ entity: tab, item });

  const saveEdit = async (newFreq) => {
    if (!editing) return;
    const { entity, item } = editing;
    try {
      await updaters[entity](item.id, { frequency: newFreq });
      setEditing(null);
      await reload();
    } catch (e) {
      console.error("update failed", e);
    }
  };

  const openAdd = () => {
    if (tab === "files") setOpenAddFile(true);
    else if (tab === "folders") setOpenAddFolder(true);
    else setOpenAddIp(true);
  };

  const submitAddFile = async ({ path, frequency }) => {
    try {
      await creators.files({ path, frequency, status: "active" });
      setOpenAddFile(false);
      await reload();
    } catch (e) {
      console.error("create file failed", e);
    }
  };
  const submitAddFolder = async ({ path, frequency }) => {
    try {
      await creators.folders({ path, frequency, status: "active" });
      setOpenAddFolder(false);
      await reload();
    } catch (e) {
      console.error("create folder failed", e);
    }
  };
  const submitAddIp = async ({ ip, hostname, frequency }) => {
    try {
      await creators.ips({ ip, hostname, frequency, status: "active" });
      setOpenAddIp(false);
      await reload();
    } catch (e) {
      console.error("create ip failed", e);
    }
  };

  return (
    <div className="space-y-4">
      {/* Tabs + Add */}
      <div className="flex items-center justify-between">
        <div className="flex gap-2">
          {["files", "folders", "ips"].map((t) => (
            <button
              key={t}
              onClick={() => setTab(t)}
              className={`px-3 py-1.5 rounded-md border capitalize ${
                tab === t ? "bg-panel2 border-white/10" : "bg-panel/50 border-white/5"
              }`}
            >
              {t}
            </button>
          ))}
        </div>

        <button
          onClick={openAdd}
          className="px-3 py-1.5 rounded-md border border-white/10 bg-panel2 hover:bg-panel transition"
        >
          + Add
        </button>
      </div>

      {/* Table */}
      <div className="card p-0 overflow-hidden">
        <table className="w-full text-sm">
          <thead className="bg-white/5 text-muted">
            <tr>
              <th className="text-left px-4 py-3 w-[45%]">Path / IP</th>
              <th className="text-left px-4 py-3 w-[20%]">Frequency</th>
              <th className="text-left px-4 py-3 w-[15%]">Status</th>
              <th className="text-right px-4 py-3 w-[20%]">Actions</th>
            </tr>
          </thead>
          <tbody>
            {loading && (
              <tr>
                <td colSpan={4} className="px-4 py-6 text-muted">
                  Loading…
                </td>
              </tr>
            )}
            {!loading && rows.length === 0 && (
              <tr>
                <td colSpan={4} className="px-4 py-6 text-muted">
                  No data
                </td>
              </tr>
            )}
            {!loading &&
              rows.map((it) => (
                <tr key={it.id} className="border-t border-white/5">
                  <td className="px-4 py-3">
                    <div className="text-white truncate">{it.path || it.ip || "-"}</div>
                    {it.hostname && <div className="text-xs text-muted">{it.hostname}</div>}
                  </td>
                  <td className="px-4 py-3">
                    <span className="inline-block rounded-md bg-white/5 border border-white/10 px-2 py-1">
                      {it.frequency || "hourly"}
                    </span>
                  </td>
                  <td className="px-4 py-3">
                    <span
                      className={`badge ${
                        it.status === "active"
                          ? "bg-emerald-500/20 text-emerald-300"
                          : "bg-white/5 text-muted"
                      }`}
                    >
                      {it.status || "inactive"}
                    </span>
                  </td>
                  <td className="px-4 py-3">
                    <div className="flex justify-end gap-2">
                      <IconButton title="Edit" onClick={() => openEdit(it)}>
                        <Pencil size={16} />
                      </IconButton>
                      <IconButton title="Scan now" onClick={() => onScan(it.id)}>
                        <ScanLine size={16} />
                      </IconButton>
                      <IconButton title="Delete" onClick={() => onDelete(it.id)}>
                        <Trash2 size={16} />
                      </IconButton>
                    </div>
                  </td>
                </tr>
              ))}
          </tbody>
        </table>
      </div>

      {/* Modals */}
      <EditFrequencyModal
        open={!!editing}
        item={editing?.item}
        onClose={() => setEditing(null)}
        onSave={saveEdit}
      />

      <AddPathModal
        open={openAddFile}
        kind="files"
        onClose={() => setOpenAddFile(false)}
        onSave={submitAddFile}
      />
      <AddPathModal
        open={openAddFolder}
        kind="folders"
        onClose={() => setOpenAddFolder(false)}
        onSave={submitAddFolder}
      />
      <AddIpModal
        open={openAddIp}
        onClose={() => setOpenAddIp(false)}
        onSave={submitAddIp}
      />
    </div>
  );
}

---------- END OF FILE: hids-web/src/pages/Surveillance.jsx ----------


---------- START OF FILE: hids-web/src/lib/api.js ----------

// src/lib/api.js
const BASE = import.meta.env.VITE_API_BASE || "";
console.log("API base:", BASE);

async function fetchJson(path, { method = "GET", token, body, form } = {}) {
    const url = `${BASE}${path}`;
    const headers = {};
    if (token) headers["Authorization"] = `Bearer ${token}`;
    if (!form) headers["Content-Type"] = "application/json";

    const res = await fetch(url, {
        method,
        headers,
        body: form ? body : body ? JSON.stringify(body) : undefined,
    });

    const ct = res.headers.get("content-type") || "";
    const txt = await res.text();

    if (!res.ok) {
        let data = null;
        try { if (ct.includes("application/json")) data = JSON.parse(txt); } catch {}
        const err = new Error(`HTTP ${res.status} ${res.statusText}`);
        err.status = res.status;
        err.body = data ?? txt;
        throw err;
    }
    try { return ct.includes("application/json") ? JSON.parse(txt) : txt; }
    catch { return txt; }
}

/* -------------------------------- Utilities -------------------------------- */
const qs = (obj = {}) =>
    Object.entries(obj)
        .filter(([, v]) => v !== undefined && v !== null && v !== "")
        .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)
        .join("&");

/* ------------------------------ Public API --------------------------------- */
export const api = {
    /* ------------------ Auth ------------------ */
    login: (username, password) =>
        fetchJson("/auth/login", {
        method: "POST",
        form: true,
        body: new URLSearchParams({ username, password }),
        }),
    me: (t) => fetchJson("/users/me", { token: t }),

    /* -------------- Monitoring --------------- */
    listFiles:   (t)        => fetchJson("/monitoring/files", { token: t }),
    createFile:  (t, d)     => fetchJson("/monitoring/files", { method: "POST", token: t, body: d }),
    updateFile:  (t, id, d) => fetchJson(`/monitoring/files/${id}`, { method: "PUT", token: t, body: d }),
    deleteFile:  (t, id)    => fetchJson(`/monitoring/files/${id}`, { method: "DELETE", token: t }),
    scanNowFile: (t, id)    => fetchJson(`/monitoring/files/${id}/scan-now`, { method: "POST", token: t }),

    listFolders: (t)        => fetchJson("/monitoring/folders", { token: t }),
    createFolder:(t, d)     => fetchJson("/monitoring/folders", { method: "POST", token: t, body: d }),
    updateFolder:(t, id, d) => fetchJson(`/monitoring/folders/${id}`, { method: "PUT", token: t, body: d }),
    deleteFolder:(t, id)    => fetchJson(`/monitoring/folders/${id}`, { method: "DELETE", token: t }),
    scanNowFolder:(t, id)   => fetchJson(`/monitoring/folders/${id}/scan-now`, { method: "POST", token: t }),

    listIps:     (t)        => fetchJson("/monitoring/ips", { token: t }),
    createIp:    (t, d)     => fetchJson("/monitoring/ips", { method: "POST", token: t, body: d }),
    updateIp:    (t, id, d) => fetchJson(`/monitoring/ips/${id}`, { method: "PUT", token: t, body: d }),
    deleteIp:    (t, id)    => fetchJson(`/monitoring/ips/${id}`, { method: "DELETE", token: t }),
    scanNowIp:   (t, id)    => fetchJson(`/monitoring/ips/${id}/scan-now`, { method: "POST", token: t }),

    setFileFreq:   (t, id, frequency) => fetchJson(`/monitoring/files/${id}`,   { method: "PUT", token: t, body: { frequency } }),
    setFolderFreq: (t, id, frequency) => fetchJson(`/monitoring/folders/${id}`, { method: "PUT", token: t, body: { frequency } }),
    setIpFreq:     (t, id, frequency) => fetchJson(`/monitoring/ips/${id}`,     { method: "PUT", token: t, body: { frequency } }),

    /* ----------------- Metrics/Reports ---------------- */
    metrics: (t) => fetchJson("/metrics?limit_events=10", { token: t }),
    reports: (t) => fetchJson("/reports?limit_events=50", { token: t }),

    /* ---------------- Alerts & Activity (LOG FILE FIRST) --------------- */
    listHidsLog: async (t, { type = "activity", page = 1, limit = 10, level = "", contains = "" } = {}) => {
        try {
        const r = await fetchJson(`/logs/hids?${qs({ log_type: type, page, limit, level, contains })}`, { token: t });
        return { lines: r.lines, page_count: r.page_count, total: r.total };
        } catch (e) {
        // Fallback si l’endpoint n’existe pas encore
        if (e.status === 404) {
            if (type === "activity") {
            const a = await fetchJson(`/activity?${qs({ limit, offset: (page - 1) * limit })}`, { token: t });
            const items = a?.items || a || [];
            return { lines: items.map(x => ({ ts: x.ts, level: x.level || "INFO", source: x.kind || x.entity_type, msg: x.message || x.raw || "" })), page_count: 1, total: items.length };
            } else {
            const al = await fetchJson(`/alerts?${qs({ limit, offset: (page - 1) * limit })}`, { token: t });
            const items = al?.items || al || [];
            return { lines: items.map(x => ({ ts: x.ts, level: x.severity || "INFO", source: x.entity_type, msg: x.message || "" })), page_count: 1, total: items.length };
            }
        }
        throw e;
        }
    },
    clearHidsLog: (t, type) =>
        fetchJson("/logs/hids/clear", { method: "POST", token: t, body: { type } }),
    // purge avancée: type=activity|alerts, level=..., from=ISO, to=ISO
    purgeHidsLog: (t, { type, level, from, to }) =>
        fetchJson("/logs/hids/purge", { method: "POST", token: t, body: { type, level, from, to } }),

    // Compat list
    listAlerts: (t, { limit, offset, severity, entity_type } = {}) =>
        fetchJson(`/alerts?${qs({ limit, offset, severity, entity_type })}`, { token: t })
        .then((res) => Array.isArray(res) ? ({ items: res, total: res.length }) :
            ({ items: res.items || [], total: res.total ?? res.count ?? (res.items || []).length })),
    listActivity: (t, { limit, offset, kind, entity_type } = {}) =>
        fetchJson(`/activity?${qs({ limit, offset, kind, entity_type })}`, { token: t })
        .then((res) => Array.isArray(res) ? ({ items: res, total: res.length }) :
            ({ items: res.items || [], total: res.total ?? res.count ?? (res.items || []).length })),

    /* ---------------- Users (Settings) --------------- */
    listUsers:   (t)                 => fetchJson("/users", { token: t }),
    createUser:  (t, { username, email, password, is_admin }) =>
        fetchJson("/users", { method: "POST", token: t, body: { username, email, password, is_admin: !!is_admin } }),
//     updateUserPassword: (t, id, { password }) =>
//         fetchJson(`/users/${id}/password`, { method: "PUT", token: t, body: { password } }),
    updateUserPassword: (t, id, { password }) =>
    fetchJson(`/users/${id}/password`, {
        method: "PUT",
        token: t,
        body: { new_password: password }   // <-- attendu par l’API
    }),
    
    deleteUser:  (t, id)             => fetchJson(`/users/${id}`, { method: "DELETE", token: t }),

    /* ---------------- Engine all-in-one --------------- */
    engineState: (t)                 => fetchJson("/engine/state", { token: t }),
    startAll:    (t)                 => fetchJson("/engine/all/start", { method: "POST", token: t }),
    stopAll:     (t)                 => fetchJson("/engine/all/stop",  { method: "POST", token: t }),

    /* utilitaire */
    fetchJson,
};
export default api;

---------- END OF FILE: hids-web/src/lib/api.js ----------


